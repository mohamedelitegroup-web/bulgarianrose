"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(rsc)/./node_modules/uploadthing/internal/types.js":
/*!****************************************************!*\
  !*** ./node_modules/uploadthing/internal/types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* binding */ UTFiles),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   VALID_UT_HOOKS: () => (/* binding */ VALID_UT_HOOKS),\n/* harmony export */   isActionType: () => (/* binding */ isActionType),\n/* harmony export */   isUploadThingHook: () => (/* binding */ isUploadThingHook)\n/* harmony export */ });\n/**\n * Marker used to append a `customId` to the incoming file data in `.middleware()`\n * @example\n * ```ts\n * .middleware((opts) => {\n *   return {\n *     [UTFiles]: opts.files.map((file) => ({\n *       ...file,\n *       customId: generateId(),\n *     }))\n *   };\n * })\n * ```\n */ const UTFiles = Symbol(\"uploadthing-custom-id-symbol\");\n/**\n * Valid options for the `?actionType` query param\n */ const VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\",\n    \"multipart-complete\"\n];\nconst isActionType = (input)=>typeof input === \"string\" && VALID_ACTION_TYPES.includes(input);\n/**\n * Valid options for the `uploadthing-hook` header\n * for requests coming from UT server\n */ const VALID_UT_HOOKS = [\n    \"callback\"\n];\nconst isUploadThingHook = (input)=>typeof input === \"string\" && VALID_UT_HOOKS.includes(input);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFd0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaG9lLW1hcnNoYWwvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMuanM/MmY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcmtlciB1c2VkIHRvIGFwcGVuZCBhIGBjdXN0b21JZGAgdG8gdGhlIGluY29taW5nIGZpbGUgZGF0YSBpbiBgLm1pZGRsZXdhcmUoKWBcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogLm1pZGRsZXdhcmUoKG9wdHMpID0+IHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICBbVVRGaWxlc106IG9wdHMuZmlsZXMubWFwKChmaWxlKSA9PiAoe1xuICogICAgICAgLi4uZmlsZSxcbiAqICAgICAgIGN1c3RvbUlkOiBnZW5lcmF0ZUlkKCksXG4gKiAgICAgfSkpXG4gKiAgIH07XG4gKiB9KVxuICogYGBgXG4gKi8gY29uc3QgVVRGaWxlcyA9IFN5bWJvbChcInVwbG9hZHRoaW5nLWN1c3RvbS1pZC1zeW1ib2xcIik7XG4vKipcbiAqIFZhbGlkIG9wdGlvbnMgZm9yIHRoZSBgP2FjdGlvblR5cGVgIHF1ZXJ5IHBhcmFtXG4gKi8gY29uc3QgVkFMSURfQUNUSU9OX1RZUEVTID0gW1xuICAgIFwidXBsb2FkXCIsXG4gICAgXCJmYWlsdXJlXCIsXG4gICAgXCJtdWx0aXBhcnQtY29tcGxldGVcIlxuXTtcbmNvbnN0IGlzQWN0aW9uVHlwZSA9IChpbnB1dCk9PnR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIiAmJiBWQUxJRF9BQ1RJT05fVFlQRVMuaW5jbHVkZXMoaW5wdXQpO1xuLyoqXG4gKiBWYWxpZCBvcHRpb25zIGZvciB0aGUgYHVwbG9hZHRoaW5nLWhvb2tgIGhlYWRlclxuICogZm9yIHJlcXVlc3RzIGNvbWluZyBmcm9tIFVUIHNlcnZlclxuICovIGNvbnN0IFZBTElEX1VUX0hPT0tTID0gW1xuICAgIFwiY2FsbGJhY2tcIlxuXTtcbmNvbnN0IGlzVXBsb2FkVGhpbmdIb29rID0gKGlucHV0KT0+dHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiICYmIFZBTElEX1VUX0hPT0tTLmluY2x1ZGVzKGlucHV0KTtcblxuZXhwb3J0IHsgVVRGaWxlcywgVkFMSURfQUNUSU9OX1RZUEVTLCBWQUxJRF9VVF9IT09LUywgaXNBY3Rpb25UeXBlLCBpc1VwbG9hZFRoaW5nSG9vayB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/internal/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/next/index.js":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/next/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTFiles: () => (/* reexport safe */ uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_0__.UTFiles),\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var uploadthing_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uploadthing/server */ \"(rsc)/./node_modules/uploadthing/server/index.js\");\n/* harmony import */ var uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uploadthing/internal/types */ \"(rsc)/./node_modules/uploadthing/internal/types.js\");\n\n\n\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\n\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>undefined,\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n\nconst createUploadthing = (opts)=>createBuilder(opts);\nconst createRouteHandler = (opts)=>{\n    const handlers = (0,uploadthing_server__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_DO_NOT_USE_createRouteHandlerCore)(opts, \"nextjs-app\");\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */ const createNextRouteHandler = createRouteHandler;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvbmV4dC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBZ0Y7QUFDM0I7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCwyQkFBMkI7QUFDM0IsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsOEZBQTBDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwwQkFBMEI7QUFDOUM7O0FBRXlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2hvZS1tYXJzaGFsLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL25leHQvaW5kZXguanM/MTUxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTlRFUk5BTF9ET19OT1RfVVNFX2NyZWF0ZVJvdXRlSGFuZGxlckNvcmUgfSBmcm9tICd1cGxvYWR0aGluZy9zZXJ2ZXInO1xuZXhwb3J0IHsgVVRGaWxlcyB9IGZyb20gJ3VwbG9hZHRoaW5nL2ludGVybmFsL3R5cGVzJztcblxuZnVuY3Rpb24gZGVmYXVsdEVycm9yRm9ybWF0dGVyKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQ3JlYXRlQnVpbGRlcihpbml0RGVmID0ge30pIHtcbiAgICBjb25zdCBfZGVmID0ge1xuICAgICAgICAvLyBEZWZhdWx0IHJvdXRlciBjb25maWdcbiAgICAgICAgcm91dGVyQ29uZmlnOiB7XG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgIG1heEZpbGVTaXplOiBcIjRNQlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlucHV0UGFyc2VyOiB7XG4gICAgICAgICAgICBwYXJzZTogKCk9PnVuZGVmaW5lZCxcbiAgICAgICAgICAgIF9pbnB1dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgX291dHB1dDogdW5kZWZpbmVkXG4gICAgICAgIH0sXG4gICAgICAgIG1pZGRsZXdhcmU6ICgpPT4oe30pLFxuICAgICAgICBvblVwbG9hZEVycm9yOiAoKT0+KHt9KSxcbiAgICAgICAgZXJyb3JGb3JtYXR0ZXI6IGluaXREZWYuZXJyb3JGb3JtYXR0ZXIgPz8gZGVmYXVsdEVycm9yRm9ybWF0dGVyLFxuICAgICAgICAvLyBPdmVybG9hZCB3aXRoIHByb3BlcnRpZXMgcGFzc2VkIGluXG4gICAgICAgIC4uLmluaXREZWZcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0ICh1c2VyUGFyc2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICAuLi5fZGVmLFxuICAgICAgICAgICAgICAgIGlucHV0UGFyc2VyOiB1c2VyUGFyc2VyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWlkZGxld2FyZSAodXNlck1pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbENyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgIC4uLl9kZWYsXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZTogdXNlck1pZGRsZXdhcmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblVwbG9hZENvbXBsZXRlICh1c2VyVXBsb2FkQ29tcGxldGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgX2RlZixcbiAgICAgICAgICAgICAgICByZXNvbHZlcjogdXNlclVwbG9hZENvbXBsZXRlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBvblVwbG9hZEVycm9yICh1c2VyT25VcGxvYWRFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICAgICAgLi4uX2RlZixcbiAgICAgICAgICAgICAgICBvblVwbG9hZEVycm9yOiB1c2VyT25VcGxvYWRFcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQnVpbGRlcihvcHRzKSB7XG4gICAgcmV0dXJuIChpbnB1dCk9PntcbiAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICByb3V0ZXJDb25maWc6IGlucHV0LFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5jb25zdCBjcmVhdGVVcGxvYWR0aGluZyA9IChvcHRzKT0+Y3JlYXRlQnVpbGRlcihvcHRzKTtcbmNvbnN0IGNyZWF0ZVJvdXRlSGFuZGxlciA9IChvcHRzKT0+e1xuICAgIGNvbnN0IGhhbmRsZXJzID0gSU5URVJOQUxfRE9fTk9UX1VTRV9jcmVhdGVSb3V0ZUhhbmRsZXJDb3JlKG9wdHMsIFwibmV4dGpzLWFwcFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBQT1NUOiAocmVxKT0+aGFuZGxlcnMuUE9TVChyZXEpLFxuICAgICAgICBHRVQ6IChyZXEpPT5oYW5kbGVycy5HRVQocmVxKVxuICAgIH07XG59O1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGNyZWF0ZVJvdXRlSGFuZGxlcn0gaW5zdGVhZFxuICovIGNvbnN0IGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIgPSBjcmVhdGVSb3V0ZUhhbmRsZXI7XG5cbmV4cG9ydCB7IGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIsIGNyZWF0ZVJvdXRlSGFuZGxlciwgY3JlYXRlVXBsb2FkdGhpbmcgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/next/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/server/index.js":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/server/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTERNAL_DO_NOT_USE_createRouteHandlerCore: () => (/* binding */ INTERNAL_DO_NOT_USE_createRouteHandlerCore),\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   UTFile: () => (/* binding */ UTFile),\n/* harmony export */   UTFiles: () => (/* reexport safe */ uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles),\n/* harmony export */   UploadThingError: () => (/* reexport safe */ _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError),\n/* harmony export */   createRouteHandler: () => (/* binding */ createRouteHandler),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.js\");\n/* harmony import */ var _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @effect/schema/Schema */ \"(rsc)/./node_modules/@effect/schema/dist/esm/Schema.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var consola_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! consola/core */ \"(rsc)/./node_modules/consola/dist/core.mjs\");\n/* harmony import */ var effect_Logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Logger */ \"(rsc)/./node_modules/effect/dist/esm/Logger.js\");\n/* harmony import */ var effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/LogLevel */ \"(rsc)/./node_modules/effect/dist/esm/LogLevel.js\");\n/* harmony import */ var std_env__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! std-env */ \"(rsc)/./node_modules/std-env/dist/index.mjs\");\n/* harmony import */ var effect_Context__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/Context */ \"(rsc)/./node_modules/effect/dist/esm/Context.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uploadthing/internal/types */ \"(rsc)/./node_modules/uploadthing/internal/types.js\");\n/* harmony import */ var _uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @uploadthing/mime-types */ \"(rsc)/./node_modules/@uploadthing/mime-types/dist/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar version = \"6.12.0\";\n\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    const errorFormatter = router[Object.keys(router)[0]]?._def.errorFormatter ?? defaultErrorFormatter;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return errorFormatter(error);\n}\n\nconst ContentDispositionSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Literal(..._uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.ValidContentDispositions);\n_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Literal(..._uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.ValidACLs);\n/**\n * =============================================================================\n * ======================== File Type Hierarchy ===============================\n * =============================================================================\n */ /**\n * Properties from the web File object, this is what the client sends when initiating an upload\n */ class FileUploadData extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"FileUploadData\")({\n    name: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    size: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number,\n    type: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String\n}) {\n}\n/**\n * `.middleware()` can add a customId to the incoming file data\n */ class FileUploadDataWithCustomId extends FileUploadData.extend(\"FileUploadDataWithCustomId\")({\n    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String)\n}) {\n}\n/**\n * When files are uploaded, we get back a key and a URL for the file\n */ class UploadedFileData extends FileUploadDataWithCustomId.extend(\"UploadedFileData\")({\n    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String\n}) {\n}\n/**\n * =============================================================================\n * ======================== Server Response Schemas ============================\n * =============================================================================\n */ class PresignedBase extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"PresignedBaseSchema\")({\n    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    fileType: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    fileUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    pollingJwt: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    pollingUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    contentDisposition: ContentDispositionSchema,\n    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String)\n}) {\n}\nclass MPUResponse extends PresignedBase.extend(\"MPUResponseSchema\")({\n    urls: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    chunkSize: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number,\n    chunkCount: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number\n}) {\n}\nclass PSPResponse extends PresignedBase.extend(\"PSPResponseSchema\")({\n    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    fields: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Record(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String)\n}) {\n}\nconst PresignedURLResponse = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Union(PSPResponse, MPUResponse));\nclass PollUploadResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"PollUploadResponse\")({\n    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    fileData: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n        fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n        fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n        fileSize: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number,\n        fileType: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n        metadata: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n        customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n        callbackUrl: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n        callbackSlug: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String)\n    }))\n}) {\n}\nclass FailureCallbackResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"FailureCallbackResponse\")({\n    success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Boolean,\n    message: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String)\n}) {\n}\nclass ServerCallbackPostResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"ServerCallbackPostResponse\")({\n    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String\n}) {\n}\n/**\n * =============================================================================\n * ======================== Client Action Payloads ============================\n * =============================================================================\n */ class UploadActionPayload extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"UploadActionPayload\")({\n    files: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Array(FileUploadData),\n    input: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Unknown\n}) {\n}\nclass FailureActionPayload extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"FailureActionPayload\")({\n    fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n    storageProviderError: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n    fileName: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String\n}) {\n}\nclass MultipartCompleteActionPayload extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"MultipartCompleteActionPayload\")({\n    fileKey: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    uploadId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n    etags: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n        tag: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n        partNumber: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number\n    }))\n}) {\n}\n\nconst isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nconst conditionalDevServer = (fileKey, apiKey)=>{\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        const file = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${fileKey}`)).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(PollUploadResponse)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((res)=>res.status === \"done\" ? effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed(res.fileData) : effect_Effect__WEBPACK_IMPORTED_MODULE_4__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.retry({\n            while: (err)=>err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n            schedule: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff)()\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"RetryError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(e)));\n        if (file === undefined) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(`Failed to simulate callback for file ${fileKey}`);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"File took too long to upload\"\n            });\n        }\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logInfo(`SIMULATING FILE UPLOAD WEBHOOK CALLBACK`, callbackUrl);\n        const payload = JSON.stringify({\n            status: \"uploaded\",\n            metadata: JSON.parse(file.metadata ?? \"{}\"),\n            file: new UploadedFileData({\n                url: `https://utfs.io/f/${encodeURIComponent(fileKey)}`,\n                key: fileKey,\n                name: file.fileName,\n                size: file.fileSize,\n                customId: file.customId,\n                type: file.fileType\n            })\n        });\n        const signature = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tryPromise({\n            try: ()=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.signPayload)(payload, apiKey),\n            catch: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to sign payload\",\n                    cause: e\n                })\n        });\n        const callbackResponse = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(callbackUrl, {\n            method: \"POST\",\n            body: payload,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"uploadthing-hook\": \"callback\",\n                \"x-uploadthing-signature\": signature\n            }\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"FetchError\", ()=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed(new Response(null, {\n                status: 500\n            }))));\n        if (isValidResponse(callbackResponse)) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logInfo(\"Successfully simulated callback for file\", fileKey);\n        } else {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(`\nFailed to simulate callback for file '${file.fileKey}'. Is your webhook configured correctly?\n  - Make sure the URL '${callbackUrl}' is accessible without any authentication. You can verify this by running 'curl -X POST ${callbackUrl}' in your terminal\n  - Still facing issues? Read https://docs.uploadthing.com/faq for common issues\n`.trim());\n        }\n        return file;\n    });\n};\n\nconst colorize = (str, level)=>{\n    // TODO: Maybe check is shell supports colors\n    switch(level){\n        case \"error\":\n        case \"fatal\":\n            return `\\x1b[41m\\x1b[30m${str}\\x1b[0m`;\n        case \"warn\":\n            return `\\x1b[43m\\x1b[30m${str}\\x1b[0m`;\n        case \"info\":\n        case \"log\":\n            return `\\x1b[44m\\x1b[30m${str}\\x1b[0m`;\n        case \"debug\":\n            return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n        case \"trace\":\n            return `\\x1b[47m\\x1b[30m${str}\\x1b[0m`;\n        case \"success\":\n            return `\\x1b[42m\\x1b[30m${str}\\x1b[0m`;\n        default:\n            return str;\n    }\n};\nconst icons = {\n    fatal: \"⨯\",\n    error: \"⨯\",\n    warn: \"⚠️\",\n    info: \"ℹ\",\n    log: \"ℹ\",\n    debug: \"⚙\",\n    trace: \"→\",\n    success: \"✓\"\n};\nfunction formatStack(stack) {\n    const cwd = \"cwd\" in std_env__WEBPACK_IMPORTED_MODULE_5__.process && typeof std_env__WEBPACK_IMPORTED_MODULE_5__.process.cwd === \"function\" ? std_env__WEBPACK_IMPORTED_MODULE_5__.process.cwd() : \"__UnknownCWD__\";\n    return \"  \" + stack.split(\"\\n\").splice(1).map((l)=>l.trim().replace(\"file://\", \"\").replace(cwd + \"/\", \"\")).join(\"\\n  \");\n}\nfunction formatArgs(args) {\n    const fmtArgs = args.map((arg)=>{\n        if ((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(arg) && typeof arg.stack === \"string\") {\n            return arg.message + \"\\n\" + formatStack(arg.stack);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return arg;\n    });\n    return fmtArgs.map((arg)=>{\n        if (typeof arg === \"string\") {\n            return arg;\n        }\n        return JSON.stringify(arg, null, 4);\n    });\n}\nconst logger = (0,consola_core__WEBPACK_IMPORTED_MODULE_1__.createConsola)({\n    reporters: [\n        {\n            log: (logObj)=>{\n                const { type, tag, date, args } = logObj;\n                const icon = icons[type];\n                const logPrefix = colorize(` ${icon} ${tag} ${date.toLocaleTimeString()} `, type);\n                const lines = formatArgs(args).join(\" \") // concat all arguments to one space-separated string (like console does)\n                .split(\"\\n\") // split all the newlines (e.g. from logged JSON.stringified objects)\n                .map((l)=>logPrefix + \" \" + l) // prepend the log prefix to each line\n                .join(\"\\n\"); // join all the lines back together\n                // eslint-disable-next-line no-console\n                console.log(lines);\n            }\n        }\n    ],\n    defaults: {\n        tag: \"UPLOADTHING\"\n    }\n});\nconst effectLoggerLevelToConsolaLevel = {\n    All: \"verbose\",\n    Fatal: \"error\",\n    Error: \"error\",\n    Info: \"info\",\n    Debug: \"debug\",\n    Trace: \"trace\",\n    Warning: \"warn\",\n    None: \"silent\"\n};\nconst withMinimalLogLevel = (level = \"info\")=>{\n    logger.level = consola_core__WEBPACK_IMPORTED_MODULE_1__.LogLevels[level];\n    return effect_Logger__WEBPACK_IMPORTED_MODULE_6__.withMinimumLogLevel({\n        silent: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.None,\n        error: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.Error,\n        warn: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.Warning,\n        info: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.Info,\n        debug: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.Debug,\n        trace: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.Trace,\n        verbose: effect_LogLevel__WEBPACK_IMPORTED_MODULE_7__.All\n    }[level]);\n};\nconst ConsolaLogger = effect_Logger__WEBPACK_IMPORTED_MODULE_6__.replace(effect_Logger__WEBPACK_IMPORTED_MODULE_6__.defaultLogger, effect_Logger__WEBPACK_IMPORTED_MODULE_6__.make(({ logLevel, message })=>{\n    // FIXME: Probably log other stuff than just message?\n    logger[effectLoggerLevelToConsolaLevel[logLevel._tag]](message);\n}));\n\nconst uploadMultipart = (file, presigned)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(`Uploading file ${file.name} with ${presigned.urls.length} chunks of size ${presigned.chunkSize} bytes each`);\n        const etags = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.forEach(presigned.urls, (url, index)=>{\n            const offset = presigned.chunkSize * index;\n            const end = Math.min(offset + presigned.chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            return uploadPart({\n                url,\n                chunk: chunk,\n                contentDisposition: presigned.contentDisposition,\n                contentType: file.type,\n                fileName: file.name,\n                maxRetries: 10,\n                key: presigned.key,\n                uploadId: presigned.uploadId\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((etag)=>({\n                    tag: etag,\n                    partNumber: index + 1\n                })), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"RetryError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(e)));\n        }, {\n            concurrency: \"inherit\"\n        });\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"File\", file.name, \"uploaded successfully.\");\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Completing multipart upload...\");\n        yield* completeMultipartUpload(presigned, etags);\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Multipart upload complete.\");\n    });\n/**\n * Used by server uploads where progress is not needed.\n * Uses normal fetch API.\n */ const uploadPart = (opts)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.contentDisposition)(opts.contentDisposition, opts.fileName)\n        }\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((res)=>res.ok && res.headers.get(\"Etag\") ? effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed(res.headers.get(\"Etag\")) : effect_Effect__WEBPACK_IMPORTED_MODULE_4__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.retry({\n        while: (res)=>res instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n        schedule: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff)(),\n        times: opts.maxRetries\n    }), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapErrorTag(\"RetryError\", ()=>// Max retries exceeded, tell UT server that upload failed\n        abortMultipartUpload({\n            key: opts.key,\n            uploadId: opts.uploadId\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((res)=>{\n            effect_Effect__WEBPACK_IMPORTED_MODULE_4__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: `Failed to upload file ${opts.fileName} to S3`,\n                cause: res\n            }));\n        }))));\nconst completeMultipartUpload = (presigned, etags)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/completeMultipart\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: presigned.key,\n            uploadId: presigned.uploadId,\n            etags\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n        success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Boolean,\n        message: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.optional(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String)\n    }))), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.withSpan(\"completeMultipartUpload\", {\n        attributes: {\n            etags,\n            presigned\n        }\n    }));\nconst abortMultipartUpload = (presigned)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: presigned.key,\n            uploadId: presigned.uploadId\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(FailureCallbackResponse)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.withSpan(\"abortMultipartUpload\", {\n        attributes: {\n            presigned\n        }\n    }));\n\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n\nconst getApiKey = (apiKey)=>{\n    if (apiKey) return apiKey;\n    if (std_env__WEBPACK_IMPORTED_MODULE_5__.process.env.UPLOADTHING_SECRET) return std_env__WEBPACK_IMPORTED_MODULE_5__.process.env.UPLOADTHING_SECRET;\n    return undefined;\n};\nconst getApiKeyOrThrow = (apiKey)=>{\n    const key = getApiKey(apiKey);\n    if (!key?.startsWith(\"sk_\")) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"MISSING_ENV\",\n            message: \"Missing or invalid API key. API keys must start with `sk_`.\"\n        });\n    }\n    return key;\n};\n\nclass FileSizeMismatch extends effect_Data__WEBPACK_IMPORTED_MODULE_8__.Error {\n    constructor(type, max, actual){\n        const reason = `You uploaded a ${type} file that was ${(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.bytesToFileSize)(actual)}, but the limit for that type is ${max}`;\n        super({\n            reason\n        });\n        this._tag = \"FileSizeMismatch\";\n        this.name = \"FileSizeMismatchError\";\n    }\n}\nclass FileCountMismatch extends effect_Data__WEBPACK_IMPORTED_MODULE_8__.Error {\n    constructor(type, boundtype, bound, actual){\n        const reason = `You uploaded ${actual} file(s) of type '${type}', but the ${boundtype} for that type is ${bound}`;\n        super({\n            reason\n        });\n        this._tag = \"FileCountMismatch\";\n        this.name = \"FileCountMismatchError\";\n    }\n}\n// Verify that the uploaded files doesn't violate the route config,\n// e.g. uploading more videos than allowed, or a file that is larger than allowed.\n// This is double-checked on infra side, but we want to fail early to avoid network latency.\nconst assertFilesMeetConfig = (files, routeConfig)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        const counts = {};\n        for (const file of files){\n            const type = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig));\n            counts[type] = (counts[type] ?? 0) + 1;\n            const sizeLimit = routeConfig[type]?.maxFileSize;\n            if (!sizeLimit) {\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.InvalidRouteConfigError(type, \"maxFileSize\");\n            }\n            const sizeLimitBytes = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fileSizeToBytes)(sizeLimit);\n            if (file.size > sizeLimitBytes) {\n                return yield* new FileSizeMismatch(type, sizeLimit, file.size);\n            }\n        }\n        for(const _key in counts){\n            const key = _key;\n            const config = routeConfig[key];\n            if (!config) return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.InvalidRouteConfigError(key);\n            const count = counts[key];\n            const min = config.minFileCount;\n            const max = config.maxFileCount;\n            if (min > max) {\n                return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid config during file count - minFileCount > maxFileCount\",\n                    cause: `minFileCount must be less than maxFileCount for key ${key}. got: ${min} > ${max}`\n                });\n            }\n            if (count < min) {\n                return yield* new FileCountMismatch(key, \"minimum\", min, count);\n            }\n            if (count > max) {\n                return yield* new FileCountMismatch(key, \"maximum\", max, count);\n            }\n        }\n        return null;\n    });\nclass RequestInput extends /** #__PURE__ */ effect_Context__WEBPACK_IMPORTED_MODULE_9__.Tag(\"uploadthing/RequestInput\")() {\n}\nconst parseAndValidateRequest = (input, opts, adapter)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        const req = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.isEffect(input.req) ? input.req : effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed(input.req);\n        // Get inputs from query and params\n        const url = new URL(req.url);\n        const headers = req.headers;\n        const params = url.searchParams;\n        const action = params.get(\"actionType\");\n        const slug = params.get(\"slug\");\n        const hook = headers.get(\"uploadthing-hook\");\n        const utFrontendPackage = headers.get(\"x-uploadthing-package\") ?? \"unknown\";\n        const clientVersion = headers.get(\"x-uploadthing-version\");\n        const apiKey = getApiKey(opts.config?.uploadthingSecret);\n        if (clientVersion != null && clientVersion !== version) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(`Client version mismatch. Server version: ${version}, Client version: ${clientVersion}`);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Client version mismatch\",\n                cause: `Server version: ${version}, Client version: ${clientVersion}`\n            });\n        }\n        if (!slug) {\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"No slug provided in params:\", params);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"No slug provided in params\"\n            });\n        }\n        if (slug && typeof slug !== \"string\") {\n            const msg = `Expected slug to be of type 'string', got '${typeof slug}'`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: msg\n            });\n        }\n        if (!apiKey) {\n            const msg = `No secret provided, please set UPLOADTHING_SECRET in your env file or in the config`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: `No secret provided`,\n                cause: msg\n            });\n        }\n        if (!apiKey.startsWith(\"sk_\")) {\n            const msg = `Invalid secret provided, UPLOADTHING_SECRET must start with 'sk_'`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"MISSING_ENV\",\n                message: \"Invalid API key. API keys must start with 'sk_'.\",\n                cause: msg\n            });\n        }\n        if (utFrontendPackage && typeof utFrontendPackage !== \"string\") {\n            const msg = `Expected x-uploadthing-package to be of type 'string', got '${typeof utFrontendPackage}'`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`x-uploadthing-package` must be a string. eg. '@uploadthing/react'\",\n                cause: msg\n            });\n        }\n        const uploadable = opts.router[slug];\n        if (!uploadable) {\n            const msg = `No file route found for slug ${slug}`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: msg\n            });\n        }\n        if (action && !(0,uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.isActionType)(action)) {\n            const msg = `Expected ${uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${action}\"`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Invalid action type\", msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${action}`,\n                message: msg\n            });\n        }\n        if (hook && !(0,uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.isUploadThingHook)(hook)) {\n            const msg = `Expected ${uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.VALID_UT_HOOKS.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${hook}\"`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Invalid uploadthing hook\", msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid uploadthing hook ${hook}`,\n                message: msg\n            });\n        }\n        if (!action && !hook || action && hook) {\n            const msg = `Exactly one of 'actionType' or 'uploadthing-hook' must be provided`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: msg\n            });\n        }\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"✔︎ All request input is valid\");\n        // FIXME: This should probably provide the full context at once instead of\n        // partially in the `runRequestHandlerAsync` and partially in here...\n        // Ref: https://discord.com/channels/@me/1201977154577891369/1207441839972548669\n        const contextValue = yield* _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext;\n        contextValue.baseHeaders[\"x-uploadthing-api-key\"] = apiKey;\n        contextValue.baseHeaders[\"x-uploadthing-fe-package\"] = utFrontendPackage;\n        contextValue.baseHeaders[\"x-uploadthing-be-adapter\"] = adapter;\n        const { isDev = std_env__WEBPACK_IMPORTED_MODULE_5__.isDevelopment } = opts.config ?? {};\n        if (isDev) yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logInfo(\"UploadThing dev server is now running!\");\n        const base = {\n            req,\n            config: opts.config ?? {},\n            middlewareArgs: input.middlewareArgs,\n            isDev,\n            apiKey,\n            slug,\n            uploadable,\n            hook: null,\n            action: null\n        };\n        return action ? {\n            ...base,\n            action: action\n        } : {\n            ...base,\n            hook: hook\n        };\n    });\n\nconst resolveCallbackUrl = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n    const { config, req, isDev } = yield* RequestInput;\n    let callbackUrl = new URL(req.url);\n    if (config?.callbackUrl) {\n        callbackUrl = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(config.callbackUrl);\n    } else if (std_env__WEBPACK_IMPORTED_MODULE_5__.process.env.UPLOADTHING_URL) {\n        callbackUrl = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(std_env__WEBPACK_IMPORTED_MODULE_5__.process.env.UPLOADTHING_URL);\n    }\n    if (isDev || !callbackUrl.host.includes(\"localhost\")) {\n        return callbackUrl;\n    }\n    // Production builds have to have a public URL so UT can send webhook\n    // Parse the URL from the headers\n    let parsedFromHeaders = req.headers.get(\"origin\") ?? req.headers.get(\"referer\") ?? req.headers.get(\"host\") ?? req.headers.get(\"x-forwarded-host\");\n    if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n        parsedFromHeaders = (req.headers.get(\"x-forwarded-proto\") ?? \"https\") + \"://\" + parsedFromHeaders;\n    }\n    if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n        // Didn't find a valid URL in the headers, log a warning and use the original url anyway\n        effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logWarning(\"You are using a localhost callback url in production which is not supported.\", \"Read more and learn how to fix it here: https://docs.uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\");\n        return callbackUrl;\n    }\n    return yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(parsedFromHeaders);\n});\n\n/**\n * Allows adapters to be fully async/await instead of providing services and running Effect programs\n */ const runRequestHandlerAsync = (handler, args, config)=>handler(args).pipe(withMinimalLogLevel(config?.logLevel), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provide(ConsolaLogger), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, {\n        fetch: config?.fetch ?? globalThis.fetch,\n        baseHeaders: {\n            \"x-uploadthing-version\": version,\n            // These are filled in later in `parseAndValidateRequest`\n            \"x-uploadthing-api-key\": undefined,\n            \"x-uploadthing-be-adapter\": undefined,\n            \"x-uploadthing-fe-package\": undefined\n        }\n    }), asHandlerOutput, effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runPromise);\nconst asHandlerOutput = (effect)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchAll(effect, (error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed({\n            success: false,\n            error\n        }));\nconst handleRequest = RequestInput.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(({ action, hook })=>{\n    if (hook === \"callback\") return handleCallbackRequest;\n    switch(action){\n        case \"upload\":\n            return handleUploadAction;\n        case \"multipart-complete\":\n            return handleMultipartCompleteAction;\n        case \"failure\":\n            return handleMultipartFailureAction;\n    }\n}), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.map((output)=>({\n        success: true,\n        ...output\n    })));\nconst buildRequestHandler = (opts, adapter)=>(input)=>handleRequest.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provideServiceEffect(RequestInput, parseAndValidateRequest(input, opts, adapter)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTags({\n            InvalidJsonError: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"An error occured while parsing input/output\",\n                    cause: e\n                }),\n            BadRequestError: (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: e.getMessage(),\n                    cause: e,\n                    data: e.json\n                })),\n            FetchError: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: typeof e.error === \"string\" ? e.error : e.message,\n                    cause: e,\n                    data: e.error\n                }),\n            ParseError: (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"An error occured while parsing input/output\",\n                    cause: e\n                })\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(e.message)));\nconst handleCallbackRequest = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n    const { req, uploadable, apiKey } = yield* RequestInput;\n    const verified = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tryPromise({\n        try: async ()=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.verifySignature)(await req.clone().text(), req.headers.get(\"x-uploadthing-signature\"), apiKey),\n        catch: ()=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid signature\"\n            })\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Signature verified:\", verified);\n    if (!verified) {\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Invalid signature\");\n        return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid signature\"\n        });\n    }\n    const requestInput = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.flatMap((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(req), _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n        status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n        file: UploadedFileData,\n        metadata: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Record(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String, _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Unknown)\n    })));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Handling callback request with input:\", requestInput);\n    const serverData = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tryPromise({\n        try: async ()=>uploadable.resolver({\n                file: requestInput.file,\n                metadata: requestInput.metadata\n            }),\n        catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to run onUploadComplete\",\n                cause: error\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Failed to run onUploadComplete. You probably shouldn't be throwing errors here.\", error)));\n    const payload = {\n        fileKey: requestInput.file.key,\n        callbackData: serverData ?? null\n    };\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"'onUploadComplete' callback finished. Sending response to UploadThing:\", payload);\n    yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/serverCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify(payload),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(ServerCallbackPostResponse)));\n    return {\n        body: null\n    };\n});\nconst runRouteMiddleware = (opts)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        const { uploadable, middlewareArgs } = yield* RequestInput;\n        const { files, input } = opts;\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Running middleware\");\n        const metadata = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tryPromise({\n            try: async ()=>uploadable._def.middleware({\n                    ...middlewareArgs,\n                    input,\n                    files\n                }),\n            catch: (error)=>error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError ? error : new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"INTERNAL_SERVER_ERROR\",\n                    message: \"Failed to run middleware\",\n                    cause: error\n                })\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"An error occured in your middleware function\", error)));\n        if (metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles] && metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles].length !== files.length) {\n            const msg = `Expected files override to have the same length as original files, got ${metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles].length} but expected ${files.length}`;\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(msg);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Files override must have the same length as files\",\n                cause: msg\n            });\n        }\n        // Attach customIds from middleware to the files\n        const filesWithCustomIds = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.forEach(files, (file, idx)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n                const theirs = metadata[uploadthing_internal_types__WEBPACK_IMPORTED_MODULE_2__.UTFiles]?.[idx];\n                if (theirs && theirs.size !== file.size) {\n                    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logWarning(\"File size mismatch. Reverting to original size\");\n                }\n                return {\n                    name: theirs?.name ?? file.name,\n                    size: file.size,\n                    customId: theirs?.customId\n                };\n            }));\n        return {\n            metadata,\n            filesWithCustomIds\n        };\n    });\nconst handleUploadAction = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n    const opts = yield* RequestInput;\n    const { files, input } = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.flatMap((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(opts.req), _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(UploadActionPayload));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Handling upload request with input:\", {\n        files,\n        input\n    });\n    // validate the input\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Parsing user input\");\n    const inputParser = opts.uploadable._def.inputParser;\n    const parsedInput = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tryPromise({\n        try: async ()=>getParseFn(inputParser)(input),\n        catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid input\",\n                cause: error\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"An error occured trying to parse input\", error)));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Input parsed successfully\", parsedInput);\n    const { metadata, filesWithCustomIds } = yield* runRouteMiddleware({\n        input: parsedInput,\n        files\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Parsing route config\", opts.uploadable._def.routerConfig);\n    const parsedConfig = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(opts.uploadable._def.routerConfig).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"InvalidRouteConfig\", (err)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"Invalid config\",\n            cause: err\n        })));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Route config parsed successfully\", parsedConfig);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Validating files meet the config requirements\", files);\n    yield* assertFilesMeetConfig(files, parsedConfig).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchAll((e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: `Invalid config: ${e._tag}`,\n            cause: \"reason\" in e ? e.reason : e.message\n        })));\n    const callbackUrl = yield* resolveCallbackUrl.pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Failed to resolve callback URL\", error)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"InvalidURL\", (err)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: err.message\n        })));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Retrieving presigned URLs from UploadThing. Callback URL is:\", callbackUrl.href);\n    const presignedUrls = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/prepareUpload\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            files: filesWithCustomIds,\n            routeConfig: parsedConfig,\n            metadata,\n            callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n            callbackSlug: opts.slug\n        }),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(PresignedURLResponse)));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"UploadThing responded with:\", presignedUrls);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Sending presigned URLs to client\");\n    let promise = undefined;\n    if (opts.isDev) {\n        const fetchContext = yield* _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext;\n        promise = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.forEach(presignedUrls, (file)=>conditionalDevServer(file.key, opts.apiKey), {\n            concurrency: 10\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provide(ConsolaLogger), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, fetchContext), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runPromise);\n    }\n    return {\n        body: presignedUrls,\n        cleanup: promise\n    };\n});\nconst handleMultipartCompleteAction = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n    const opts = yield* RequestInput;\n    const requestInput = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.flatMap((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(opts.req), _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(MultipartCompleteActionPayload));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Handling multipart-complete request with input:\", requestInput);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Notifying UploadThing that multipart upload is complete\");\n    const completionResponse = yield* completeMultipartUpload({\n        key: requestInput.fileKey,\n        uploadId: requestInput.uploadId\n    }, requestInput.etags);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"UploadThing responded with:\", completionResponse);\n    return {\n        body: null\n    };\n});\nconst handleMultipartFailureAction = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n    const { req, uploadable } = yield* RequestInput;\n    const { fileKey, uploadId } = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.flatMap((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseRequestJson)(req), _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(FailureActionPayload));\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Handling failure request with input:\", {\n        fileKey,\n        uploadId\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Notifying UploadThing that upload failed\");\n    const failureResponse = yield* abortMultipartUpload({\n        key: fileKey,\n        uploadId\n    });\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"UploadThing responded with:\", failureResponse);\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Running 'onUploadError' callback\");\n    yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__[\"try\"]({\n        try: ()=>{\n            uploadable._def.onUploadError({\n                error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"UPLOAD_FAILED\",\n                    message: `Upload failed for ${fileKey}`\n                }),\n                fileKey\n            });\n        },\n        catch: (error)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"Failed to run onUploadError\",\n                cause: error\n            })\n    }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Failed to run onUploadError. You probably shouldn't be throwing errors here.\", error)));\n    return {\n        body: null\n    };\n});\nconst buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const permissions = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(opts.router).map((slug)=>{\n            const route = opts.router[slug];\n            const config = effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runSync((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(route._def.routerConfig));\n            return {\n                slug,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n\nfunction incompatibleNodeGuard() {\n    if (typeof std_env__WEBPACK_IMPORTED_MODULE_5__.process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = std_env__WEBPACK_IMPORTED_MODULE_5__.process.versions?.node?.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = std_env__WEBPACK_IMPORTED_MODULE_5__.process.env?.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)?.[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    // Require ^18.13.0\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(`YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`));\n    // Kill the process if it isn't going to work correctly anyway\n    // If we've gotten this far we know we have a Node.js runtime so exit is defined. Override std-env type.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n    std_env__WEBPACK_IMPORTED_MODULE_5__.process.exit?.(1);\n}\n\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>undefined,\n            _input: undefined,\n            _output: undefined\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n\n/**\n * Extension of the Blob class that simplifies setting the `name` and `customId` properties,\n * similar to the built-in File class from Node > 20.\n */ class UTFile extends Blob {\n    constructor(parts, name, options){\n        const optionsWithDefaults = {\n            ...options,\n            type: options?.type ?? ((0,_uploadthing_mime_types__WEBPACK_IMPORTED_MODULE_10__.lookup)(name) || \"application/octet-stream\"),\n            lastModified: options?.lastModified ?? Date.now()\n        };\n        super(parts, optionsWithDefaults);\n        this.name = name;\n        this.customId = optionsWithDefaults.customId;\n        this.lastModified = optionsWithDefaults.lastModified;\n    }\n}\n\nconst uploadPresignedPost = (file, presigned)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(`Uploading file ${file.name} using presigned POST URL`);\n        const formData = new FormData();\n        Object.entries(presigned.fields).forEach(([k, v])=>formData.append(k, v));\n        formData.append(\"file\", file); // File data **MUST GO LAST**\n        const res = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(presigned.url, {\n            method: \"POST\",\n            body: formData,\n            headers: new Headers({\n                Accept: \"application/xml\"\n            })\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapErrorCause(()=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    fileKey: presigned.key,\n                    uploadId: null\n                }),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(FailureCallbackResponse)))));\n        if (!res.ok) {\n            const text = yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.promise(res.text);\n            yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(`Failed to upload file ${file.name} to presigned POST URL. Response: ${text}`);\n            return yield* new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to upload file\",\n                cause: text\n            });\n        }\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"File\", file.name, \"uploaded successfully\");\n    });\n\nfunction guardServerOnly() {\n    if (typeof window !== \"undefined\") {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"The `utapi` can only be used on the server.\"\n        });\n    }\n}\nconst uploadFilesInternal = (input)=>getPresignedUrls(input).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((presigneds)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.forEach(presigneds, (file)=>uploadFile(file).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tapError((error)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Upload failed:\", error)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.match({\n                onFailure: (error)=>({\n                        data: null,\n                        error: _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(error instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError ? error : new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            message: \"Failed to upload file.\",\n                            code: \"BAD_REQUEST\",\n                            cause: error\n                        }))\n                    }),\n                onSuccess: (data)=>({\n                        data,\n                        error: null\n                    })\n            })), {\n            concurrency: 10\n        })));\n/**\n * FIXME: downloading everything into memory and then upload\n * isn't the best. We should support streams so we can download\n * just as much as we need at any time.\n */ const downloadFiles = (urls, downloadErrors)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.forEach(urls, (_url, idx)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n            let url = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(_url) ? _url.url : _url;\n            if (typeof url === \"string\") {\n                // since dataurls will result in name being too long, tell the user\n                // to use uploadFiles instead.\n                if (url.startsWith(\"data:\")) {\n                    downloadErrors[idx] = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Please use uploadFiles() for data URLs. uploadFilesFromUrl() is intended for use with remote URLs only.\"\n                    }));\n                    return null;\n                }\n            }\n            url = new URL(url);\n            const { name = url.pathname.split(\"/\").pop() ?? \"unknown-filename\", customId = undefined } = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(_url) ? _url : {};\n            const response = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(url);\n            if (!response.ok) {\n                downloadErrors[idx] = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError.toObject(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: response\n                }));\n                return undefined;\n            }\n            return yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.promise(()=>response.blob()).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((blob)=>new UTFile([\n                    blob\n                ], name, {\n                    customId\n                })));\n        }), {\n        concurrency: 10\n    });\nconst getPresignedUrls = (input)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        const { files, metadata, contentDisposition, acl } = input;\n        const fileData = files.map((file)=>({\n                name: file.name ?? \"unnamed-blob\",\n                type: file.type,\n                size: file.size,\n                ...\"customId\" in file ? {\n                    customId: file.customId\n                } : {}\n            }));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Getting presigned URLs for files\", fileData);\n        const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n            data: PresignedURLResponse\n        });\n        const presigneds = yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n            method: \"POST\",\n            cache: \"no-store\",\n            body: JSON.stringify({\n                files: fileData,\n                metadata,\n                contentDisposition,\n                acl\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(responseSchema)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"ParseError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(e)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"FetchError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(e)));\n        yield* effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Got presigned URLs:\", presigneds.data);\n        return files.map((file, i)=>({\n                file,\n                presigned: presigneds.data[i]\n            }));\n    });\nconst uploadFile = (input)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.gen(function*() {\n        const { file, presigned } = input;\n        if (\"urls\" in presigned) {\n            yield* uploadMultipart(file, presigned);\n        } else {\n            yield* uploadPresignedPost(file, presigned);\n        }\n        yield* (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${presigned.key}`)).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(PollUploadResponse)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tap(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Polled upload\", presigned.key)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((res)=>res.status === \"done\" ? effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed(undefined) : effect_Effect__WEBPACK_IMPORTED_MODULE_4__.fail(new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError())), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.retry({\n            while: (err)=>err instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.RetryError,\n            schedule: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.exponentialBackoff)()\n        }), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"RetryError\", (e)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(e)));\n        return {\n            key: presigned.key,\n            url: presigned.fileUrl,\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            customId: \"customId\" in file ? file.customId ?? null : null\n        };\n    });\nfunction parseTimeToSeconds(time) {\n    const match = time.toString().split(/(\\d+)/).filter(Boolean);\n    const num = Number(match[0]);\n    const unit = (match[1] ?? \"s\").trim().slice(0, 1);\n    const multiplier = {\n        s: 1,\n        m: 60,\n        h: 3600,\n        d: 86400\n    }[unit];\n    return num * multiplier;\n}\n\nclass UTApi {\n    constructor(opts){\n        this.requestUploadThing = (pathname, body, responseSchema)=>{\n            const url = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(pathname);\n            effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Requesting UploadThing:\", {\n                url,\n                body,\n                headers: this.defaultHeaders\n            }));\n            const headers = new Headers([\n                [\n                    \"Content-Type\",\n                    \"application/json\"\n                ]\n            ]);\n            for (const [key, value] of Object.entries(this.defaultHeaders)){\n                if (typeof value === \"string\") headers.set(key, value);\n            }\n            return (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fetchEff)(url, {\n                method: \"POST\",\n                cache: \"no-store\",\n                body: JSON.stringify(body),\n                headers\n            }).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.parseResponseJson), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.decodeUnknown(responseSchema)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"FetchError\", (err)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Request failed:\", err).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(()=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(err)))), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.catchTag(\"ParseError\", (err)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logError(\"Response parsing failed:\", err).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen(()=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.die(err)))), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tap((res)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"UploadThing response:\", res)));\n        };\n        this.executeAsync = (program)=>program.pipe(withMinimalLogLevel(this.logLevel), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provide(ConsolaLogger), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.provideService(_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.FetchContext, {\n                fetch: this.fetch,\n                baseHeaders: this.defaultHeaders\n            }), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runPromise);\n        /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   *\n   * @example\n   * await deleteFiles(\"myCustomIdentifier\", { keyType: \"customId\" })\n   */ this.deleteFiles = async (keys, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            class DeleteFileResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"DeleteFileResponse\")({\n                success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Boolean,\n                deletedCount: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number\n            }) {\n            }\n            return await this.executeAsync(this.requestUploadThing(\"/api/deleteFiles\", keyType === \"fileKey\" ? {\n                fileKeys: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            } : {\n                customIds: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys)\n            }, DeleteFileResponse));\n        };\n        /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ this.getFileUrls = async (keys, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            class GetFileUrlResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"GetFileUrlResponse\")({\n                data: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n                    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n                    url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String\n                }))\n            }) {\n            }\n            return await this.executeAsync(this.requestUploadThing(\"/api/getFileUrl\", keyType === \"fileKey\" ? {\n                fileKeys: keys\n            } : {\n                customIds: keys\n            }, GetFileUrlResponse));\n        };\n        /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ this.listFiles = async (opts)=>{\n            guardServerOnly();\n            class ListFileResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"ListFileResponse\")({\n                hasMore: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Boolean,\n                files: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Array(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n                    id: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n                    customId: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.NullOr(_effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String),\n                    key: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n                    name: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String,\n                    status: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Literal(\"Deletion Pending\", \"Failed\", \"Uploaded\", \"Uploading\")\n                }))\n            }) {\n            }\n            return await this.executeAsync(this.requestUploadThing(\"/api/listFiles\", {\n                ...opts\n            }, ListFileResponse));\n        };\n        this.renameFiles = async (updates)=>{\n            guardServerOnly();\n            class RenameFileResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"RenameFileResponse\")({\n                success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Boolean\n            }) {\n            }\n            return await this.executeAsync(this.requestUploadThing(\"/api/renameFiles\", {\n                updates: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(updates)\n            }, RenameFileResponse));\n        };\n        /** @deprecated Use {@link renameFiles} instead. */ this.renameFile = this.renameFiles;\n        this.getUsageInfo = async ()=>{\n            guardServerOnly();\n            class GetUsageInfoResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"GetUsageInfoResponse\")({\n                totalBytes: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number,\n                appTotalBytes: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number,\n                filesUploaded: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number,\n                limitBytes: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Number\n            }) {\n            }\n            return await this.executeAsync(this.requestUploadThing(\"/api/getUsageInfo\", {}, GetUsageInfoResponse));\n        };\n        /** Request a presigned url for a private file(s) */ this.getSignedURL = async (key, opts)=>{\n            guardServerOnly();\n            const expiresIn = opts?.expiresIn ? parseTimeToSeconds(opts.expiresIn) : undefined;\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            if (opts?.expiresIn && isNaN(expiresIn)) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"expiresIn must be a valid time string, for example '1d', '2 days', or a number of seconds.\"\n                });\n            }\n            if (expiresIn && expiresIn > 86400 * 7) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"expiresIn must be less than 7 days (604800 seconds).\"\n                });\n            }\n            class GetSignedUrlResponse extends _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Class(\"GetSignedUrlResponse\")({\n                url: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.String\n            }) {\n            }\n            return await this.executeAsync(this.requestUploadThing(\"/api/requestFileAccess\", keyType === \"fileKey\" ? {\n                fileKey: key,\n                expiresIn\n            } : {\n                customId: key,\n                expiresIn\n            }, GetSignedUrlResponse));\n        };\n        /**\n   * Update the ACL of a file or set of files.\n   *\n   * @example\n   * // Make a single file public\n   * await utapi.updateACL(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", \"public-read\");\n   *\n   * // Make multiple files private\n   * await utapi.updateACL(\n   *   [\n   *     \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *     \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\",\n   *   ],\n   *   \"private\",\n   * );\n   */ this.updateACL = async (keys, acl, opts)=>{\n            guardServerOnly();\n            const { keyType = this.defaultKeyType } = opts ?? {};\n            const updates = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(keys).map((key)=>{\n                return keyType === \"fileKey\" ? {\n                    fileKey: key,\n                    acl\n                } : {\n                    customId: key,\n                    acl\n                };\n            });\n            const responseSchema = _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Struct({\n                success: _effect_schema_Schema__WEBPACK_IMPORTED_MODULE_3__.Boolean\n            });\n            return await this.executeAsync(this.requestUploadThing(\"/api/updateACL\", {\n                updates\n            }, responseSchema));\n        };\n        // Assert some stuff\n        guardServerOnly();\n        incompatibleNodeGuard();\n        const apiKey = getApiKeyOrThrow(opts?.apiKey);\n        this.fetch = opts?.fetch ?? globalThis.fetch;\n        this.defaultHeaders = {\n            \"x-uploadthing-api-key\": apiKey,\n            \"x-uploadthing-version\": version,\n            \"x-uploadthing-be-adapter\": \"server-sdk\",\n            \"x-uploadthing-fe-package\": undefined\n        };\n        this.defaultKeyType = opts?.defaultKeyType ?? \"fileKey\";\n        this.logLevel = opts?.logLevel;\n    }\n    async uploadFiles(files, opts) {\n        guardServerOnly();\n        const uploads = await this.executeAsync(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.flatMap(uploadFilesInternal({\n            files: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(files),\n            contentDisposition: opts?.contentDisposition ?? \"inline\",\n            metadata: opts?.metadata ?? {},\n            acl: opts?.acl\n        }), (ups)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.succeed(Array.isArray(files) ? ups : ups[0])).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.tap((res)=>effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Finished uploading:\", res))));\n        return uploads;\n    }\n    async uploadFilesFromUrl(urls, opts) {\n        guardServerOnly();\n        const downloadErrors = {};\n        const uploads = await this.executeAsync(downloadFiles((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(urls), downloadErrors).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((files)=>files.filter((f)=>f != null)), effect_Effect__WEBPACK_IMPORTED_MODULE_4__.andThen((files)=>uploadFilesInternal({\n                files,\n                contentDisposition: opts?.contentDisposition ?? \"inline\",\n                metadata: opts?.metadata ?? {},\n                acl: opts?.acl\n            }))));\n        /** Put it all back together, preserve the order of files */ const responses = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.asArray)(urls).map((_, index)=>{\n            if (downloadErrors[index]) {\n                return {\n                    data: null,\n                    error: downloadErrors[index]\n                };\n            }\n            return uploads.shift();\n        });\n        /** Return single object or array based on input urls */ const uploadFileResponse = Array.isArray(urls) ? responses : responses[0];\n        effect_Effect__WEBPACK_IMPORTED_MODULE_4__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_4__.logDebug(\"Finished uploading:\", uploadFileResponse));\n        return uploadFileResponse;\n    }\n}\n\nconst createUploadthing = (opts)=>createBuilder(opts);\n/** @internal */ const INTERNAL_DO_NOT_USE_createRouteHandlerCore = (opts, adapter)=>{\n    incompatibleNodeGuard();\n    const requestHandler = buildRequestHandler(opts, adapter);\n    const getBuildPerms = buildPermissionsInfoHandler(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await runRequestHandlerAsync(requestHandler, {\n            req,\n            middlewareArgs: {\n                req,\n                event: undefined,\n                res: undefined\n            }\n        }, opts.config);\n        if (response.success === false) {\n            return Response.json(formatError(response.error, opts.router), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getStatusCodeFromError)(response.error),\n                headers: {\n                    \"x-uploadthing-version\": version\n                }\n            });\n        }\n        const res = Response.json(response.body, {\n            headers: {\n                \"x-uploadthing-version\": version\n            }\n        });\n        // @ts-expect-error - this is a custom property\n        res.cleanup = response.cleanup;\n        return res;\n    };\n    const GET = (request)=>{\n        return Response.json(getBuildPerms(), {\n            headers: {\n                \"x-uploadthing-version\": version\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nconst createRouteHandler = (opts)=>INTERNAL_DO_NOT_USE_createRouteHandlerCore(opts, \"server\");\nconst extractRouterConfig = (router)=>buildPermissionsInfoHandler({\n        router\n    })();\n/**\n * @deprecated Use {@link createRouteHandler} instead\n */ const createServerHandler = createRouteHandler;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvc2VydmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQSthO0FBQ3hYO0FBQ1o7QUFDSDtBQUNnQjtBQUNoQjtBQUNVO0FBQ0Q7QUFDUDtBQUNOO0FBQ3NGO0FBQ3JFO0FBQ0o7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQywwREFBUyxJQUFJLHlFQUF3QjtBQUN0RSwwREFBUyxJQUFJLDBEQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx3REFBTztBQUN4QyxVQUFVLHlEQUFRO0FBQ2xCLFVBQVUseURBQVE7QUFDbEIsVUFBVSx5REFBUTtBQUNsQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHlEQUFRLENBQUMseURBQVE7QUFDL0IsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyx5REFBUTtBQUNqQixTQUFTLHlEQUFRO0FBQ2pCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdEQUFPO0FBQ3ZDLFNBQVMseURBQVE7QUFDakIsY0FBYyx5REFBUTtBQUN0QixjQUFjLHlEQUFRO0FBQ3RCLGFBQWEseURBQVE7QUFDckIsZ0JBQWdCLHlEQUFRO0FBQ3hCLGdCQUFnQix5REFBUTtBQUN4QjtBQUNBLGNBQWMseURBQVEsQ0FBQyx5REFBUTtBQUMvQixDQUFDO0FBQ0Q7QUFDQTtBQUNBLFVBQVUsd0RBQU8sQ0FBQyx5REFBUTtBQUMxQixjQUFjLHlEQUFRO0FBQ3RCLGVBQWUseURBQVE7QUFDdkIsZ0JBQWdCLHlEQUFRO0FBQ3hCLENBQUM7QUFDRDtBQUNBO0FBQ0EsU0FBUyx5REFBUTtBQUNqQixZQUFZLHlEQUFRLENBQUMseURBQVEsRUFBRSx5REFBUTtBQUN2QyxDQUFDO0FBQ0Q7QUFDQSw2QkFBNkIsd0RBQU8sQ0FBQyx3REFBTztBQUM1QyxpQ0FBaUMsd0RBQU87QUFDeEMsWUFBWSx5REFBUTtBQUNwQixjQUFjLDJEQUFVLENBQUMseURBQVE7QUFDakMsaUJBQWlCLHlEQUFRLENBQUMseURBQVE7QUFDbEMsa0JBQWtCLHlEQUFRO0FBQzFCLGtCQUFrQix5REFBUTtBQUMxQixrQkFBa0IseURBQVE7QUFDMUIsa0JBQWtCLHlEQUFRLENBQUMseURBQVE7QUFDbkMsa0JBQWtCLHlEQUFRLENBQUMseURBQVE7QUFDbkMscUJBQXFCLDJEQUFVLENBQUMseURBQVE7QUFDeEMsc0JBQXNCLDJEQUFVLENBQUMseURBQVE7QUFDekMsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBLHNDQUFzQyx3REFBTztBQUM3QyxhQUFhLDBEQUFTO0FBQ3RCLGFBQWEsMkRBQVUsQ0FBQyx5REFBUTtBQUNoQyxDQUFDO0FBQ0Q7QUFDQSx5Q0FBeUMsd0RBQU87QUFDaEQsWUFBWSx5REFBUTtBQUNwQixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx3REFBTztBQUM3QyxXQUFXLHdEQUFPO0FBQ2xCLFdBQVcsMERBQVM7QUFDcEIsQ0FBQztBQUNEO0FBQ0EsbUNBQW1DLHdEQUFPO0FBQzFDLGFBQWEseURBQVE7QUFDckIsY0FBYyx5REFBUSxDQUFDLHlEQUFRO0FBQy9CLDBCQUEwQiwyREFBVSxDQUFDLHlEQUFRO0FBQzdDLGNBQWMseURBQVE7QUFDdEIsQ0FBQztBQUNEO0FBQ0EsNkNBQTZDLHdEQUFPO0FBQ3BELGFBQWEseURBQVE7QUFDckIsY0FBYyx5REFBUTtBQUN0QixXQUFXLHdEQUFPLENBQUMseURBQVE7QUFDM0IsYUFBYSx5REFBUTtBQUNyQixvQkFBb0IseURBQVE7QUFDNUIsS0FBSztBQUNMLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsOENBQVU7QUFDckIsNEJBQTRCLDZEQUFRLENBQUMsMkVBQXNCLG9CQUFvQixRQUFRLFNBQVMsa0RBQWMsQ0FBQyxrRUFBaUIsR0FBRyxrREFBYyxDQUFDLGdFQUFlLHVCQUF1QixrREFBYyxnQ0FBZ0Msa0RBQWMsaUJBQWlCLCtDQUFXLEtBQUssMkRBQVUsTUFBTSxnREFBWTtBQUNqVCx5Q0FBeUMsMkRBQVU7QUFDbkQsc0JBQXNCLHVFQUFrQjtBQUN4QyxTQUFTLEdBQUcsbURBQWUsb0JBQW9CLDhDQUFVO0FBQ3pEO0FBQ0EsbUJBQW1CLG1EQUFlLHlDQUF5QyxRQUFRO0FBQ25GLDhCQUE4QixpRUFBZ0I7QUFDOUM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHNEQUFzRCxrQkFBa0I7QUFDeEU7QUFDQSxlQUFlLGtEQUFjO0FBQzdCO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULGlDQUFpQyxxREFBaUI7QUFDbEQscUJBQXFCLGdFQUFXO0FBQ2hDLDRCQUE0QixpRUFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLFNBQVM7QUFDVCx3Q0FBd0MsNkRBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLE9BQU8sbURBQWUsbUJBQW1CLGtEQUFjO0FBQ2hFO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsbUJBQW1CLGtEQUFjO0FBQ2pDLFVBQVU7QUFDVixtQkFBbUIsbURBQWU7QUFDbEMsd0NBQXdDLGFBQWE7QUFDckQseUJBQXlCLFlBQVksMkZBQTJGLFlBQVk7QUFDNUk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxJQUFJO0FBQzFDO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUM7QUFDQTtBQUNBLHNDQUFzQyxJQUFJO0FBQzFDO0FBQ0Esc0NBQXNDLElBQUk7QUFDMUM7QUFDQSxzQ0FBc0MsSUFBSTtBQUMxQztBQUNBLHNDQUFzQyxJQUFJO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxREFBZ0IsV0FBVyw0Q0FBTyxzQkFBc0IsNENBQU87QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZEQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxlQUFlLDJEQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQSwrQ0FBK0MsTUFBTSxFQUFFLEtBQUssRUFBRSwyQkFBMkI7QUFDekY7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtREFBUztBQUM1QixXQUFXLDhEQUEwQjtBQUNyQyxnQkFBZ0IsaURBQW1CO0FBQ25DLGVBQWUsa0RBQW9CO0FBQ25DLGNBQWMsb0RBQXNCO0FBQ3BDLGNBQWMsaURBQW1CO0FBQ2pDLGVBQWUsa0RBQW9CO0FBQ25DLGVBQWUsa0RBQW9CO0FBQ25DLGlCQUFpQixnREFBa0I7QUFDbkMsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLGtEQUFjLENBQUMsd0RBQW9CLEVBQUUsK0NBQVcsSUFBSSxtQkFBbUI7QUFDN0Y7QUFDQTtBQUNBLENBQUM7O0FBRUQsMkNBQTJDLDhDQUFVO0FBQ3JELGVBQWUsbURBQWUsbUJBQW1CLFdBQVcsT0FBTyx1QkFBdUIsaUJBQWlCLHFCQUFxQjtBQUNoSSw2QkFBNkIsa0RBQWM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPLGtEQUFjO0FBQ2xDO0FBQ0E7QUFDQSxpQkFBaUIsSUFBSSxtREFBZSxvQkFBb0IsOENBQVU7QUFDbEUsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNULGVBQWUsbURBQWU7QUFDOUIsZUFBZSxtREFBZTtBQUM5QjtBQUNBLGVBQWUsbURBQWU7QUFDOUIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw2REFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx1RUFBa0I7QUFDckQ7QUFDQSxLQUFLLE9BQU8sa0RBQWMsNENBQTRDLGtEQUFjLDRCQUE0QiwrQ0FBVyxLQUFLLDJEQUFVLE1BQU0sZ0RBQVk7QUFDNUoscUNBQXFDLDJEQUFVO0FBQy9DLGtCQUFrQix1RUFBa0I7QUFDcEM7QUFDQSxLQUFLLEdBQUcsc0RBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLFNBQVMsT0FBTyxrREFBYztBQUM5QixZQUFZLCtDQUFXLEtBQUssaUVBQWdCO0FBQzVDO0FBQ0Esa0RBQWtELGVBQWU7QUFDakU7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULG9EQUFvRCw2REFBUSxDQUFDLDJFQUFzQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUssT0FBTyxrREFBYyxDQUFDLGtFQUFpQixHQUFHLGtEQUFjLENBQUMsZ0VBQWUsQ0FBQyx5REFBUTtBQUN0RixpQkFBaUIsMERBQVM7QUFDMUIsaUJBQWlCLDJEQUFVLENBQUMseURBQVE7QUFDcEMsS0FBSyxLQUFLLG1EQUFlO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLDBDQUEwQyw2REFBUSxDQUFDLDJFQUFzQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLLE9BQU8sa0RBQWMsQ0FBQyxrRUFBaUIsR0FBRyxrREFBYyxDQUFDLGdFQUFlLDRCQUE0QixtREFBZTtBQUN4SDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSw0Q0FBTyxnQ0FBZ0MsNENBQU87QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpRUFBZ0I7QUFDbEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLDhDQUFVO0FBQ3pDO0FBQ0EseUNBQXlDLE1BQU0sZ0JBQWdCLG9FQUFlLFNBQVMsbUNBQW1DLElBQUk7QUFDOUg7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw4Q0FBVTtBQUMxQztBQUNBLHVDQUF1QyxRQUFRLG1CQUFtQixLQUFLLGFBQWEsV0FBVyxtQkFBbUIsTUFBTTtBQUN4SDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDhDQUFVO0FBQzlEO0FBQ0E7QUFDQSxnQ0FBZ0Msd0VBQW1CLFlBQVksK0RBQVU7QUFDekU7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHdFQUF1QjtBQUN6RDtBQUNBLDBDQUEwQyxvRUFBZTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx3RUFBdUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaUVBQWdCO0FBQ2xEO0FBQ0E7QUFDQSxrRkFBa0YsSUFBSSxTQUFTLEtBQUssSUFBSSxJQUFJO0FBQzVHLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsNENBQTRDLCtDQUFXO0FBQ3ZEO0FBQ0Esd0RBQXdELDhDQUFVO0FBQ2xFLDJCQUEyQixtREFBZSwwQkFBMEIsa0RBQWM7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtREFBZSw2Q0FBNkMsUUFBUSxvQkFBb0IsY0FBYztBQUN6SCw4QkFBOEIsaUVBQWdCO0FBQzlDO0FBQ0E7QUFDQSwwQ0FBMEMsUUFBUSxvQkFBb0IsY0FBYztBQUNwRixhQUFhO0FBQ2I7QUFDQTtBQUNBLG1CQUFtQixtREFBZTtBQUNsQyw4QkFBOEIsaUVBQWdCO0FBQzlDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLHNFQUFzRSxZQUFZO0FBQ2xGLG1CQUFtQixtREFBZTtBQUNsQyw4QkFBOEIsaUVBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbURBQWU7QUFDbEMsOEJBQThCLGlFQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFlO0FBQ2xDLDhCQUE4QixpRUFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSx1RkFBdUYseUJBQXlCO0FBQ2hILG1CQUFtQixtREFBZTtBQUNsQyw4QkFBOEIsaUVBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsS0FBSztBQUM3RCxtQkFBbUIsbURBQWU7QUFDbEMsOEJBQThCLGlFQUFnQjtBQUM5QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsdUJBQXVCLHdFQUFZO0FBQ25DLG9DQUFvQywwRUFBa0IsY0FBYyxFQUFFLDJDQUEyQyxXQUFXLE9BQU87QUFDbkksbUJBQW1CLG1EQUFlO0FBQ2xDLDhCQUE4QixpRUFBZ0I7QUFDOUM7QUFDQSw4Q0FBOEMsT0FBTztBQUNyRDtBQUNBLGFBQWE7QUFDYjtBQUNBLHFCQUFxQiw2RUFBaUI7QUFDdEMsb0NBQW9DLHNFQUFjLGNBQWMsRUFBRSwyQ0FBMkMsV0FBVyxLQUFLO0FBQzdILG1CQUFtQixtREFBZTtBQUNsQyw4QkFBOEIsaUVBQWdCO0FBQzlDO0FBQ0EsbURBQW1ELEtBQUs7QUFDeEQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFlO0FBQ2xDLDhCQUE4QixpRUFBZ0I7QUFDOUM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGVBQWUsbURBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZEQUFZO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRLGtEQUFhLEdBQUc7QUFDeEMsMEJBQTBCLGtEQUFjO0FBQ3hDO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLDJCQUEyQiw4Q0FBVTtBQUNyQyxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0EsNkJBQTZCLGtFQUFhO0FBQzFDLE1BQU0sU0FBUyw0Q0FBTztBQUN0Qiw2QkFBNkIsa0VBQWEsQ0FBQyw0Q0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHFEQUFpQjtBQUN6QjtBQUNBO0FBQ0Esa0JBQWtCLGtFQUFhO0FBQy9CLENBQUM7O0FBRUQ7QUFDQTtBQUNBLHNIQUFzSCxrREFBYyxpQkFBaUIseURBQXFCLENBQUMsNkRBQVk7QUFDdkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssb0JBQW9CLHFEQUFpQjtBQUMxQyxrQ0FBa0MsbURBQWUsa0JBQWtCLGtEQUFjO0FBQ2pGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsd0NBQXdDLGtEQUFjLElBQUksY0FBYztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsOENBQVU7QUFDZDtBQUNBO0FBQ0EsS0FBSztBQUNMLHlFQUF5RSwrREFBMkIsK0RBQStELG9EQUFnQjtBQUNuTCx1Q0FBdUMsaUVBQWdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixrQ0FBa0MsK0NBQVcsS0FBSyxpRUFBZ0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsaUNBQWlDLGlFQUFnQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixpQ0FBaUMsaUVBQWdCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixTQUFTLEdBQUcsbURBQWUsTUFBTSxtREFBZTtBQUNoRCw4QkFBOEIsOENBQVU7QUFDeEMsWUFBWSwwQkFBMEI7QUFDdEMsNEJBQTRCLHFEQUFpQjtBQUM3Qyx1QkFBdUIsb0VBQWU7QUFDdEMsdUJBQXVCLGlFQUFnQjtBQUN2QztBQUNBO0FBQ0EsYUFBYTtBQUNiLEtBQUs7QUFDTCxXQUFXLG1EQUFlO0FBQzFCO0FBQ0EsZUFBZSxtREFBZTtBQUM5QiwwQkFBMEIsaUVBQWdCO0FBQzFDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxnQ0FBZ0Msa0RBQWMsQ0FBQyxxRUFBZ0IsT0FBTyxnRUFBZSxDQUFDLHlEQUFRO0FBQzlGLGdCQUFnQix5REFBUTtBQUN4QjtBQUNBLGtCQUFrQix5REFBUSxDQUFDLHlEQUFRLEVBQUUsMERBQVM7QUFDOUMsS0FBSztBQUNMLFdBQVcsbURBQWU7QUFDMUIsOEJBQThCLHFEQUFpQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsNEJBQTRCLGlFQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsS0FBSyxPQUFPLG1EQUFlLFVBQVUsbURBQWU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG1EQUFlO0FBQzFCLFdBQVcsNkRBQVEsQ0FBQywyRUFBc0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssT0FBTyxrREFBYyxDQUFDLGtFQUFpQixHQUFHLGtEQUFjLENBQUMsZ0VBQWU7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1DQUFtQyw4Q0FBVTtBQUM3QyxnQkFBZ0IsNkJBQTZCO0FBQzdDLGdCQUFnQixlQUFlO0FBQy9CLGVBQWUsbURBQWU7QUFDOUIsZ0NBQWdDLHFEQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQiw2Q0FBNkMsaUVBQWdCLGVBQWUsaUVBQWdCO0FBQzVGO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixTQUFTLE9BQU8sbURBQWUsVUFBVSxtREFBZTtBQUN4RCxxQkFBcUIsK0RBQU8sY0FBYywrREFBTztBQUNqRCxrR0FBa0csU0FBUywrREFBTyxVQUFVLGVBQWUsYUFBYTtBQUN4SixtQkFBbUIsbURBQWU7QUFDbEMsOEJBQThCLGlFQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDBDQUEwQyxrREFBYyxxQkFBcUIsOENBQVU7QUFDdkYsd0NBQXdDLCtEQUFPO0FBQy9DO0FBQ0EsMkJBQTJCLHFEQUFpQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMkJBQTJCLDhDQUFVO0FBQ3JDO0FBQ0EsWUFBWSxlQUFlLFNBQVMsa0RBQWMsQ0FBQyxxRUFBZ0IsWUFBWSxnRUFBZTtBQUM5RixXQUFXLG1EQUFlO0FBQzFCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxXQUFXLG1EQUFlO0FBQzFCO0FBQ0EsK0JBQStCLHFEQUFpQjtBQUNoRDtBQUNBLDRCQUE0QixpRUFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLEtBQUssT0FBTyxtREFBZSxVQUFVLG1EQUFlO0FBQ3BELFdBQVcsbURBQWU7QUFDMUIsWUFBWSwrQkFBK0I7QUFDM0M7QUFDQTtBQUNBLEtBQUs7QUFDTCxXQUFXLG1EQUFlO0FBQzFCLGdDQUFnQyx5RUFBb0IseUNBQXlDLG1EQUFlLGtDQUFrQyxpRUFBZ0I7QUFDOUo7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFdBQVcsbURBQWU7QUFDMUIsV0FBVyxtREFBZTtBQUMxQiwyREFBMkQsbURBQWUsVUFBVSxpRUFBZ0I7QUFDcEc7QUFDQSx3Q0FBd0MsT0FBTztBQUMvQztBQUNBLFNBQVM7QUFDVCx1REFBdUQsbURBQWUsVUFBVSxtREFBZSw0Q0FBNEMsbURBQWUsMEJBQTBCLGlFQUFnQjtBQUNwTTtBQUNBO0FBQ0EsU0FBUztBQUNULFdBQVcsbURBQWU7QUFDMUIsaUNBQWlDLDZEQUFRLENBQUMsMkVBQXNCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUssT0FBTyxrREFBYyxDQUFDLGtFQUFpQixHQUFHLGtEQUFjLENBQUMsZ0VBQWU7QUFDN0UsV0FBVyxtREFBZTtBQUMxQixXQUFXLG1EQUFlO0FBQzFCO0FBQ0E7QUFDQSxvQ0FBb0MsNkRBQVk7QUFDaEQsa0JBQWtCLGtEQUFjO0FBQ2hDO0FBQ0EsU0FBUyxPQUFPLGtEQUFjLGlCQUFpQix5REFBcUIsQ0FBQyw2REFBWSxpQkFBaUIscURBQWlCO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsc0NBQXNDLDhDQUFVO0FBQ2hEO0FBQ0EsZ0NBQWdDLGtEQUFjLENBQUMscUVBQWdCLFlBQVksZ0VBQWU7QUFDMUYsV0FBVyxtREFBZTtBQUMxQixXQUFXLG1EQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxXQUFXLG1EQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxxQ0FBcUMsOENBQVU7QUFDL0MsWUFBWSxrQkFBa0I7QUFDOUIsWUFBWSxvQkFBb0IsU0FBUyxrREFBYyxDQUFDLHFFQUFnQixPQUFPLGdFQUFlO0FBQzlGLFdBQVcsbURBQWU7QUFDMUI7QUFDQTtBQUNBLEtBQUs7QUFDTCxXQUFXLG1EQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxXQUFXLG1EQUFlO0FBQzFCLFdBQVcsbURBQWU7QUFDMUIsV0FBVyxpREFBVTtBQUNyQjtBQUNBO0FBQ0EsMkJBQTJCLGlFQUFnQjtBQUMzQztBQUNBLGtEQUFrRCxRQUFRO0FBQzFELGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsNEJBQTRCLGlFQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsS0FBSyxPQUFPLG1EQUFlLFVBQVUsbURBQWU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQVU7QUFDdEM7QUFDQSwyQkFBMkIsa0RBQWMsQ0FBQyx5RUFBb0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSw0Q0FBTztBQUN0QjtBQUNBO0FBQ0EsNkJBQTZCLDRDQUFPO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw0Q0FBTztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksa0RBQWMsQ0FBQyxtREFBZSw0QkFBNEIsTUFBTSxHQUFHLE1BQU07QUFDN0U7QUFDQTtBQUNBO0FBQ0EsSUFBSSw0Q0FBTztBQUNYOztBQUVBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxnRUFBTTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQyw4Q0FBVTtBQUN6RCxlQUFlLG1EQUFlLG1CQUFtQixXQUFXO0FBQzVEO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsMkJBQTJCLDZEQUFRO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVMsT0FBTyx3REFBb0IsS0FBSyw2REFBUSxDQUFDLDJFQUFzQjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU8sa0RBQWMsQ0FBQyxrRUFBaUIsR0FBRyxrREFBYyxDQUFDLGdFQUFlO0FBQ3JGO0FBQ0EsZ0NBQWdDLGtEQUFjO0FBQzlDLG1CQUFtQixtREFBZSwwQkFBMEIsV0FBVyxtQ0FBbUMsS0FBSztBQUMvRyw4QkFBOEIsaUVBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGVBQWUsbURBQWU7QUFDOUIsS0FBSzs7QUFFTDtBQUNBO0FBQ0Esa0JBQWtCLGlFQUFnQjtBQUNsQztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxrRUFBa0Usa0RBQWMsZUFBZSxrREFBYywyQ0FBMkMsbURBQWUsVUFBVSxtREFBZSw0QkFBNEIsZ0RBQVk7QUFDeE87QUFDQTtBQUNBLCtCQUErQixpRUFBZ0IsMkJBQTJCLGlFQUFnQixlQUFlLGlFQUFnQjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Qsa0RBQWMsb0JBQW9CLDhDQUFVO0FBQzlGLHNCQUFzQiw2REFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxpRUFBZ0IsY0FBYyxpRUFBZ0I7QUFDeEY7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtRkFBbUYsRUFBRSw2REFBUTtBQUNqSCxvQ0FBb0MsNkRBQVE7QUFDNUM7QUFDQSxzQ0FBc0MsaUVBQWdCLGNBQWMsaUVBQWdCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsMEJBQTBCLGtEQUFjLDJCQUEyQixrREFBYztBQUNqRjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLGtDQUFrQyw4Q0FBVTtBQUM1QyxnQkFBZ0IsMkNBQTJDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQixhQUFhO0FBQ2IsZUFBZSxtREFBZTtBQUM5QiwrQkFBK0IseURBQVE7QUFDdkM7QUFDQSxTQUFTO0FBQ1Qsa0NBQWtDLDZEQUFRLENBQUMsMkVBQXNCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFNBQVMsT0FBTyxrREFBYyxDQUFDLGtFQUFpQixHQUFHLGtEQUFjLENBQUMsZ0VBQWUsbUJBQW1CLG1EQUFlLG9CQUFvQiw4Q0FBVSxNQUFNLG1EQUFlLG9CQUFvQiw4Q0FBVTtBQUNwTSxlQUFlLG1EQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixLQUFLO0FBQ0wsNEJBQTRCLDhDQUFVO0FBQ3RDLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsZUFBZSw2REFBUSxDQUFDLDJFQUFzQixvQkFBb0IsY0FBYyxTQUFTLGtEQUFjLENBQUMsa0VBQWlCLEdBQUcsa0RBQWMsQ0FBQyxnRUFBZSx1QkFBdUIsOENBQVUsQ0FBQyxtREFBZSxtQ0FBbUMsa0RBQWMsZ0NBQWdDLGtEQUFjLGNBQWMsK0NBQVcsS0FBSywyREFBVSxNQUFNLGdEQUFZO0FBQ3BXLHlDQUF5QywyREFBVTtBQUNuRCxzQkFBc0IsdUVBQWtCO0FBQ3hDLFNBQVMsR0FBRyxtREFBZSxvQkFBb0IsOENBQVU7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkVBQXNCO0FBQzlDLFlBQVksa0RBQWMsQ0FBQyxtREFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZEQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPLGtEQUFjLENBQUMsa0VBQWlCLEdBQUcsa0RBQWMsQ0FBQyxnRUFBZSxtQkFBbUIsbURBQWUsc0JBQXNCLG1EQUFlLDhCQUE4QixrREFBYyxLQUFLLDhDQUFVLFVBQVUsbURBQWUsc0JBQXNCLG1EQUFlLHVDQUF1QyxrREFBYyxLQUFLLDhDQUFVLFVBQVUsOENBQVUsUUFBUSxtREFBZTtBQUNwWTtBQUNBLHdGQUF3RixrREFBYyxpQkFBaUIseURBQXFCLENBQUMsNkRBQVk7QUFDeko7QUFDQTtBQUNBLGFBQWEsR0FBRyxxREFBaUI7QUFDakM7QUFDQTtBQUNBLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MscUJBQXFCO0FBQ3BFO0FBQ0E7QUFDQSxvQkFBb0IsZ0NBQWdDO0FBQ3BELDZDQUE2Qyx3REFBTztBQUNwRCx5QkFBeUIsMERBQVM7QUFDbEMsOEJBQThCLHlEQUFRO0FBQ3RDLGFBQWE7QUFDYjtBQUNBO0FBQ0EsMEJBQTBCLDREQUFPO0FBQ2pDLGNBQWM7QUFDZCwyQkFBMkIsNERBQU87QUFDbEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQW1CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixLQUFLLHVJQUF1STtBQUNwSztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0lBQXdJLEVBQUUseUlBQXlJO0FBQy9TO0FBQ0E7QUFDQSxvQkFBb0IsZ0NBQWdDO0FBQ3BELDZDQUE2Qyx3REFBTztBQUNwRCxzQkFBc0Isd0RBQU8sQ0FBQyx5REFBUTtBQUN0Qyx5QkFBeUIseURBQVE7QUFDakMseUJBQXlCLHlEQUFRO0FBQ2pDLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxvQ0FBb0MsVUFBVTtBQUM5Qyx3QkFBd0IsS0FBSztBQUM3QjtBQUNBO0FBQ0EsMkNBQTJDLHdEQUFPO0FBQ2xELHlCQUF5QiwwREFBUztBQUNsQyx1QkFBdUIsd0RBQU8sQ0FBQyx5REFBUTtBQUN2Qyx3QkFBd0IseURBQVE7QUFDaEMsOEJBQThCLHlEQUFRLENBQUMseURBQVE7QUFDL0MseUJBQXlCLHlEQUFRO0FBQ2pDLDBCQUEwQix5REFBUTtBQUNsQyw0QkFBNEIsMERBQVM7QUFDckMsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHdEQUFPO0FBQ3BELHlCQUF5QiwwREFBUztBQUNsQyxhQUFhO0FBQ2I7QUFDQTtBQUNBLHlCQUF5Qiw0REFBTztBQUNoQyxhQUFhO0FBQ2I7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQSwrQ0FBK0Msd0RBQU87QUFDdEQsNEJBQTRCLHlEQUFRO0FBQ3BDLCtCQUErQix5REFBUTtBQUN2QywrQkFBK0IseURBQVE7QUFDdkMsNEJBQTRCLHlEQUFRO0FBQ3BDLGFBQWE7QUFDYjtBQUNBLDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixnQ0FBZ0M7QUFDcEQ7QUFDQSwwQkFBMEIsaUVBQWdCO0FBQzFDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDBCQUEwQixpRUFBZ0I7QUFDMUM7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLCtDQUErQyx3REFBTztBQUN0RCxxQkFBcUIseURBQVE7QUFDN0IsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGdDQUFnQztBQUNwRCw0QkFBNEIsNERBQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixtQ0FBbUMseURBQVE7QUFDM0MseUJBQXlCLDBEQUFTO0FBQ2xDLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsa0RBQWM7QUFDOUQsbUJBQW1CLDREQUFPO0FBQzFCO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EsU0FBUyxVQUFVLGtEQUFjLDRDQUE0Qyw4Q0FBVSxRQUFRLG1EQUFlO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsNERBQU8sNkJBQTZCLGtEQUFjLHlDQUF5QyxrREFBYztBQUN2SztBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsYUFBYTtBQUNiLHVGQUF1Riw0REFBTztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFFBQVEsa0RBQWMsQ0FBQyxtREFBZTtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0JBQXdCLDJFQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esb0JBQW9CLDBCQUEwQjtBQUM5Qzs7QUFFc0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaG9lLW1hcnNoYWwvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvc2VydmVyL2luZGV4LmpzPzYxY2UiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsaWRDb250ZW50RGlzcG9zaXRpb25zLCBWYWxpZEFDTHMsIGZldGNoRWZmLCBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMLCBwYXJzZVJlc3BvbnNlSnNvbiwgUmV0cnlFcnJvciwgZXhwb25lbnRpYWxCYWNrb2ZmLCBVcGxvYWRUaGluZ0Vycm9yLCBzaWduUGF5bG9hZCwgaXNPYmplY3QsIGNvbnRlbnREaXNwb3NpdGlvbiwgZ2V0VHlwZUZyb21GaWxlTmFtZSwgb2JqZWN0S2V5cywgSW52YWxpZFJvdXRlQ29uZmlnRXJyb3IsIGZpbGVTaXplVG9CeXRlcywgYnl0ZXNUb0ZpbGVTaXplLCBGZXRjaENvbnRleHQsIGdldEZ1bGxBcGlVcmwsIHZlcmlmeVNpZ25hdHVyZSwgcGFyc2VSZXF1ZXN0SnNvbiwgZmlsbElucHV0Um91dGVDb25maWcsIGFzQXJyYXksIGdldFN0YXR1c0NvZGVGcm9tRXJyb3IgfSBmcm9tICdAdXBsb2FkdGhpbmcvc2hhcmVkJztcbmV4cG9ydCB7IFVwbG9hZFRoaW5nRXJyb3IgfSBmcm9tICdAdXBsb2FkdGhpbmcvc2hhcmVkJztcbmltcG9ydCAqIGFzIFMgZnJvbSAnQGVmZmVjdC9zY2hlbWEvU2NoZW1hJztcbmltcG9ydCAqIGFzIEVmZmVjdCBmcm9tICdlZmZlY3QvRWZmZWN0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnNvbGEsIExvZ0xldmVscyB9IGZyb20gJ2NvbnNvbGEvY29yZSc7XG5pbXBvcnQgKiBhcyBMb2dnZXIgZnJvbSAnZWZmZWN0L0xvZ2dlcic7XG5pbXBvcnQgKiBhcyBFZmZlY3RMb2dMZXZlbCBmcm9tICdlZmZlY3QvTG9nTGV2ZWwnO1xuaW1wb3J0IHsgcHJvY2VzcywgaXNEZXZlbG9wbWVudCB9IGZyb20gJ3N0ZC1lbnYnO1xuaW1wb3J0ICogYXMgQ29udGV4dCBmcm9tICdlZmZlY3QvQ29udGV4dCc7XG5pbXBvcnQgKiBhcyBEYXRhIGZyb20gJ2VmZmVjdC9EYXRhJztcbmltcG9ydCB7IGlzQWN0aW9uVHlwZSwgVkFMSURfQUNUSU9OX1RZUEVTLCBpc1VwbG9hZFRoaW5nSG9vaywgVkFMSURfVVRfSE9PS1MsIFVURmlsZXMgfSBmcm9tICd1cGxvYWR0aGluZy9pbnRlcm5hbC90eXBlcyc7XG5leHBvcnQgeyBVVEZpbGVzIH0gZnJvbSAndXBsb2FkdGhpbmcvaW50ZXJuYWwvdHlwZXMnO1xuaW1wb3J0IHsgbG9va3VwIH0gZnJvbSAnQHVwbG9hZHRoaW5nL21pbWUtdHlwZXMnO1xuXG52YXIgdmVyc2lvbiA9IFwiNi4xMi4wXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckZvcm1hdHRlcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2VcbiAgICB9O1xufVxuZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXJyb3IsIHJvdXRlcikge1xuICAgIGNvbnN0IGVycm9yRm9ybWF0dGVyID0gcm91dGVyW09iamVjdC5rZXlzKHJvdXRlcilbMF1dPy5fZGVmLmVycm9yRm9ybWF0dGVyID8/IGRlZmF1bHRFcnJvckZvcm1hdHRlcjtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICByZXR1cm4gZXJyb3JGb3JtYXR0ZXIoZXJyb3IpO1xufVxuXG5jb25zdCBDb250ZW50RGlzcG9zaXRpb25TY2hlbWEgPSBTLkxpdGVyYWwoLi4uVmFsaWRDb250ZW50RGlzcG9zaXRpb25zKTtcblMuTGl0ZXJhbCguLi5WYWxpZEFDTHMpO1xuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogPT09PT09PT09PT09PT09PT09PT09PT09IEZpbGUgVHlwZSBIaWVyYXJjaHkgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqLyAvKipcbiAqIFByb3BlcnRpZXMgZnJvbSB0aGUgd2ViIEZpbGUgb2JqZWN0LCB0aGlzIGlzIHdoYXQgdGhlIGNsaWVudCBzZW5kcyB3aGVuIGluaXRpYXRpbmcgYW4gdXBsb2FkXG4gKi8gY2xhc3MgRmlsZVVwbG9hZERhdGEgZXh0ZW5kcyBTLkNsYXNzKFwiRmlsZVVwbG9hZERhdGFcIikoe1xuICAgIG5hbWU6IFMuU3RyaW5nLFxuICAgIHNpemU6IFMuTnVtYmVyLFxuICAgIHR5cGU6IFMuU3RyaW5nXG59KSB7XG59XG4vKipcbiAqIGAubWlkZGxld2FyZSgpYCBjYW4gYWRkIGEgY3VzdG9tSWQgdG8gdGhlIGluY29taW5nIGZpbGUgZGF0YVxuICovIGNsYXNzIEZpbGVVcGxvYWREYXRhV2l0aEN1c3RvbUlkIGV4dGVuZHMgRmlsZVVwbG9hZERhdGEuZXh0ZW5kKFwiRmlsZVVwbG9hZERhdGFXaXRoQ3VzdG9tSWRcIikoe1xuICAgIGN1c3RvbUlkOiBTLk51bGxPcihTLlN0cmluZylcbn0pIHtcbn1cbi8qKlxuICogV2hlbiBmaWxlcyBhcmUgdXBsb2FkZWQsIHdlIGdldCBiYWNrIGEga2V5IGFuZCBhIFVSTCBmb3IgdGhlIGZpbGVcbiAqLyBjbGFzcyBVcGxvYWRlZEZpbGVEYXRhIGV4dGVuZHMgRmlsZVVwbG9hZERhdGFXaXRoQ3VzdG9tSWQuZXh0ZW5kKFwiVXBsb2FkZWRGaWxlRGF0YVwiKSh7XG4gICAga2V5OiBTLlN0cmluZyxcbiAgICB1cmw6IFMuU3RyaW5nXG59KSB7XG59XG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT0gU2VydmVyIFJlc3BvbnNlIFNjaGVtYXMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqLyBjbGFzcyBQcmVzaWduZWRCYXNlIGV4dGVuZHMgUy5DbGFzcyhcIlByZXNpZ25lZEJhc2VTY2hlbWFcIikoe1xuICAgIGtleTogUy5TdHJpbmcsXG4gICAgZmlsZU5hbWU6IFMuU3RyaW5nLFxuICAgIGZpbGVUeXBlOiBTLlN0cmluZyxcbiAgICBmaWxlVXJsOiBTLlN0cmluZyxcbiAgICBwb2xsaW5nSnd0OiBTLlN0cmluZyxcbiAgICBwb2xsaW5nVXJsOiBTLlN0cmluZyxcbiAgICBjb250ZW50RGlzcG9zaXRpb246IENvbnRlbnREaXNwb3NpdGlvblNjaGVtYSxcbiAgICBjdXN0b21JZDogUy5OdWxsT3IoUy5TdHJpbmcpXG59KSB7XG59XG5jbGFzcyBNUFVSZXNwb25zZSBleHRlbmRzIFByZXNpZ25lZEJhc2UuZXh0ZW5kKFwiTVBVUmVzcG9uc2VTY2hlbWFcIikoe1xuICAgIHVybHM6IFMuQXJyYXkoUy5TdHJpbmcpLFxuICAgIHVwbG9hZElkOiBTLlN0cmluZyxcbiAgICBjaHVua1NpemU6IFMuTnVtYmVyLFxuICAgIGNodW5rQ291bnQ6IFMuTnVtYmVyXG59KSB7XG59XG5jbGFzcyBQU1BSZXNwb25zZSBleHRlbmRzIFByZXNpZ25lZEJhc2UuZXh0ZW5kKFwiUFNQUmVzcG9uc2VTY2hlbWFcIikoe1xuICAgIHVybDogUy5TdHJpbmcsXG4gICAgZmllbGRzOiBTLlJlY29yZChTLlN0cmluZywgUy5TdHJpbmcpXG59KSB7XG59XG5jb25zdCBQcmVzaWduZWRVUkxSZXNwb25zZSA9IFMuQXJyYXkoUy5VbmlvbihQU1BSZXNwb25zZSwgTVBVUmVzcG9uc2UpKTtcbmNsYXNzIFBvbGxVcGxvYWRSZXNwb25zZSBleHRlbmRzIFMuQ2xhc3MoXCJQb2xsVXBsb2FkUmVzcG9uc2VcIikoe1xuICAgIHN0YXR1czogUy5TdHJpbmcsXG4gICAgZmlsZURhdGE6IFMub3B0aW9uYWwoUy5TdHJ1Y3Qoe1xuICAgICAgICBmaWxlS2V5OiBTLk51bGxPcihTLlN0cmluZyksXG4gICAgICAgIGZpbGVOYW1lOiBTLlN0cmluZyxcbiAgICAgICAgZmlsZVNpemU6IFMuTnVtYmVyLFxuICAgICAgICBmaWxlVHlwZTogUy5TdHJpbmcsXG4gICAgICAgIG1ldGFkYXRhOiBTLk51bGxPcihTLlN0cmluZyksXG4gICAgICAgIGN1c3RvbUlkOiBTLk51bGxPcihTLlN0cmluZyksXG4gICAgICAgIGNhbGxiYWNrVXJsOiBTLm9wdGlvbmFsKFMuU3RyaW5nKSxcbiAgICAgICAgY2FsbGJhY2tTbHVnOiBTLm9wdGlvbmFsKFMuU3RyaW5nKVxuICAgIH0pKVxufSkge1xufVxuY2xhc3MgRmFpbHVyZUNhbGxiYWNrUmVzcG9uc2UgZXh0ZW5kcyBTLkNsYXNzKFwiRmFpbHVyZUNhbGxiYWNrUmVzcG9uc2VcIikoe1xuICAgIHN1Y2Nlc3M6IFMuQm9vbGVhbixcbiAgICBtZXNzYWdlOiBTLm9wdGlvbmFsKFMuU3RyaW5nKVxufSkge1xufVxuY2xhc3MgU2VydmVyQ2FsbGJhY2tQb3N0UmVzcG9uc2UgZXh0ZW5kcyBTLkNsYXNzKFwiU2VydmVyQ2FsbGJhY2tQb3N0UmVzcG9uc2VcIikoe1xuICAgIHN0YXR1czogUy5TdHJpbmdcbn0pIHtcbn1cbi8qKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqID09PT09PT09PT09PT09PT09PT09PT09PSBDbGllbnQgQWN0aW9uIFBheWxvYWRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi8gY2xhc3MgVXBsb2FkQWN0aW9uUGF5bG9hZCBleHRlbmRzIFMuQ2xhc3MoXCJVcGxvYWRBY3Rpb25QYXlsb2FkXCIpKHtcbiAgICBmaWxlczogUy5BcnJheShGaWxlVXBsb2FkRGF0YSksXG4gICAgaW5wdXQ6IFMuVW5rbm93blxufSkge1xufVxuY2xhc3MgRmFpbHVyZUFjdGlvblBheWxvYWQgZXh0ZW5kcyBTLkNsYXNzKFwiRmFpbHVyZUFjdGlvblBheWxvYWRcIikoe1xuICAgIGZpbGVLZXk6IFMuU3RyaW5nLFxuICAgIHVwbG9hZElkOiBTLk51bGxPcihTLlN0cmluZyksXG4gICAgc3RvcmFnZVByb3ZpZGVyRXJyb3I6IFMub3B0aW9uYWwoUy5TdHJpbmcpLFxuICAgIGZpbGVOYW1lOiBTLlN0cmluZ1xufSkge1xufVxuY2xhc3MgTXVsdGlwYXJ0Q29tcGxldGVBY3Rpb25QYXlsb2FkIGV4dGVuZHMgUy5DbGFzcyhcIk11bHRpcGFydENvbXBsZXRlQWN0aW9uUGF5bG9hZFwiKSh7XG4gICAgZmlsZUtleTogUy5TdHJpbmcsXG4gICAgdXBsb2FkSWQ6IFMuU3RyaW5nLFxuICAgIGV0YWdzOiBTLkFycmF5KFMuU3RydWN0KHtcbiAgICAgICAgdGFnOiBTLlN0cmluZyxcbiAgICAgICAgcGFydE51bWJlcjogUy5OdW1iZXJcbiAgICB9KSlcbn0pIHtcbn1cblxuY29uc3QgaXNWYWxpZFJlc3BvbnNlID0gKHJlc3BvbnNlKT0+e1xuICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBmYWxzZTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDQwMCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghcmVzcG9uc2UuaGVhZGVycy5oYXMoXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIikpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5jb25zdCBjb25kaXRpb25hbERldlNlcnZlciA9IChmaWxlS2V5LCBhcGlLZXkpPT57XG4gICAgcmV0dXJuIEVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgICAgICBjb25zdCBmaWxlID0geWllbGQqIGZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoYC9hcGkvcG9sbFVwbG9hZC8ke2ZpbGVLZXl9YCkpLnBpcGUoRWZmZWN0LmFuZFRoZW4ocGFyc2VSZXNwb25zZUpzb24pLCBFZmZlY3QuYW5kVGhlbihTLmRlY29kZVVua25vd24oUG9sbFVwbG9hZFJlc3BvbnNlKSksIEVmZmVjdC5hbmRUaGVuKChyZXMpPT5yZXMuc3RhdHVzID09PSBcImRvbmVcIiA/IEVmZmVjdC5zdWNjZWVkKHJlcy5maWxlRGF0YSkgOiBFZmZlY3QuZmFpbChuZXcgUmV0cnlFcnJvcigpKSksIEVmZmVjdC5yZXRyeSh7XG4gICAgICAgICAgICB3aGlsZTogKGVycik9PmVyciBpbnN0YW5jZW9mIFJldHJ5RXJyb3IsXG4gICAgICAgICAgICBzY2hlZHVsZTogZXhwb25lbnRpYWxCYWNrb2ZmKClcbiAgICAgICAgfSksIEVmZmVjdC5jYXRjaFRhZyhcIlJldHJ5RXJyb3JcIiwgKGUpPT5FZmZlY3QuZGllKGUpKSk7XG4gICAgICAgIGlmIChmaWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRXJyb3IoYEZhaWxlZCB0byBzaW11bGF0ZSBjYWxsYmFjayBmb3IgZmlsZSAke2ZpbGVLZXl9YCk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIlVQTE9BRF9GQUlMRURcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZpbGUgdG9vayB0b28gbG9uZyB0byB1cGxvYWRcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNhbGxiYWNrVXJsID0gZmlsZS5jYWxsYmFja1VybCArIGA/c2x1Zz0ke2ZpbGUuY2FsbGJhY2tTbHVnfWA7XG4gICAgICAgIGlmICghY2FsbGJhY2tVcmwuc3RhcnRzV2l0aChcImh0dHBcIikpIGNhbGxiYWNrVXJsID0gXCJodHRwOi8vXCIgKyBjYWxsYmFja1VybDtcbiAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dJbmZvKGBTSU1VTEFUSU5HIEZJTEUgVVBMT0FEIFdFQkhPT0sgQ0FMTEJBQ0tgLCBjYWxsYmFja1VybCk7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdGF0dXM6IFwidXBsb2FkZWRcIixcbiAgICAgICAgICAgIG1ldGFkYXRhOiBKU09OLnBhcnNlKGZpbGUubWV0YWRhdGEgPz8gXCJ7fVwiKSxcbiAgICAgICAgICAgIGZpbGU6IG5ldyBVcGxvYWRlZEZpbGVEYXRhKHtcbiAgICAgICAgICAgICAgICB1cmw6IGBodHRwczovL3V0ZnMuaW8vZi8ke2VuY29kZVVSSUNvbXBvbmVudChmaWxlS2V5KX1gLFxuICAgICAgICAgICAgICAgIGtleTogZmlsZUtleSxcbiAgICAgICAgICAgICAgICBuYW1lOiBmaWxlLmZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIHNpemU6IGZpbGUuZmlsZVNpemUsXG4gICAgICAgICAgICAgICAgY3VzdG9tSWQ6IGZpbGUuY3VzdG9tSWQsXG4gICAgICAgICAgICAgICAgdHlwZTogZmlsZS5maWxlVHlwZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHlpZWxkKiBFZmZlY3QudHJ5UHJvbWlzZSh7XG4gICAgICAgICAgICB0cnk6ICgpPT5zaWduUGF5bG9hZChwYXlsb2FkLCBhcGlLZXkpLFxuICAgICAgICAgICAgY2F0Y2g6IChlKT0+bmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBzaWduIHBheWxvYWRcIixcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tSZXNwb25zZSA9IHlpZWxkKiBmZXRjaEVmZihjYWxsYmFja1VybCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGJvZHk6IHBheWxvYWQsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgXCJ1cGxvYWR0aGluZy1ob29rXCI6IFwiY2FsbGJhY2tcIixcbiAgICAgICAgICAgICAgICBcIngtdXBsb2FkdGhpbmctc2lnbmF0dXJlXCI6IHNpZ25hdHVyZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5waXBlKEVmZmVjdC5jYXRjaFRhZyhcIkZldGNoRXJyb3JcIiwgKCk9PkVmZmVjdC5zdWNjZWVkKG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiA1MDBcbiAgICAgICAgICAgIH0pKSkpO1xuICAgICAgICBpZiAoaXNWYWxpZFJlc3BvbnNlKGNhbGxiYWNrUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0luZm8oXCJTdWNjZXNzZnVsbHkgc2ltdWxhdGVkIGNhbGxiYWNrIGZvciBmaWxlXCIsIGZpbGVLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dFcnJvcihgXG5GYWlsZWQgdG8gc2ltdWxhdGUgY2FsbGJhY2sgZm9yIGZpbGUgJyR7ZmlsZS5maWxlS2V5fScuIElzIHlvdXIgd2ViaG9vayBjb25maWd1cmVkIGNvcnJlY3RseT9cbiAgLSBNYWtlIHN1cmUgdGhlIFVSTCAnJHtjYWxsYmFja1VybH0nIGlzIGFjY2Vzc2libGUgd2l0aG91dCBhbnkgYXV0aGVudGljYXRpb24uIFlvdSBjYW4gdmVyaWZ5IHRoaXMgYnkgcnVubmluZyAnY3VybCAtWCBQT1NUICR7Y2FsbGJhY2tVcmx9JyBpbiB5b3VyIHRlcm1pbmFsXG4gIC0gU3RpbGwgZmFjaW5nIGlzc3Vlcz8gUmVhZCBodHRwczovL2RvY3MudXBsb2FkdGhpbmcuY29tL2ZhcSBmb3IgY29tbW9uIGlzc3Vlc1xuYC50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgIH0pO1xufTtcblxuY29uc3QgY29sb3JpemUgPSAoc3RyLCBsZXZlbCk9PntcbiAgICAvLyBUT0RPOiBNYXliZSBjaGVjayBpcyBzaGVsbCBzdXBwb3J0cyBjb2xvcnNcbiAgICBzd2l0Y2gobGV2ZWwpe1xuICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgY2FzZSBcImZhdGFsXCI6XG4gICAgICAgICAgICByZXR1cm4gYFxceDFiWzQxbVxceDFiWzMwbSR7c3RyfVxceDFiWzBtYDtcbiAgICAgICAgY2FzZSBcIndhcm5cIjpcbiAgICAgICAgICAgIHJldHVybiBgXFx4MWJbNDNtXFx4MWJbMzBtJHtzdHJ9XFx4MWJbMG1gO1xuICAgICAgICBjYXNlIFwiaW5mb1wiOlxuICAgICAgICBjYXNlIFwibG9nXCI6XG4gICAgICAgICAgICByZXR1cm4gYFxceDFiWzQ0bVxceDFiWzMwbSR7c3RyfVxceDFiWzBtYDtcbiAgICAgICAgY2FzZSBcImRlYnVnXCI6XG4gICAgICAgICAgICByZXR1cm4gYFxceDFiWzQ3bVxceDFiWzMwbSR7c3RyfVxceDFiWzBtYDtcbiAgICAgICAgY2FzZSBcInRyYWNlXCI6XG4gICAgICAgICAgICByZXR1cm4gYFxceDFiWzQ3bVxceDFiWzMwbSR7c3RyfVxceDFiWzBtYDtcbiAgICAgICAgY2FzZSBcInN1Y2Nlc3NcIjpcbiAgICAgICAgICAgIHJldHVybiBgXFx4MWJbNDJtXFx4MWJbMzBtJHtzdHJ9XFx4MWJbMG1gO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG59O1xuY29uc3QgaWNvbnMgPSB7XG4gICAgZmF0YWw6IFwi4qivXCIsXG4gICAgZXJyb3I6IFwi4qivXCIsXG4gICAgd2FybjogXCLimqDvuI9cIixcbiAgICBpbmZvOiBcIuKEuVwiLFxuICAgIGxvZzogXCLihLlcIixcbiAgICBkZWJ1ZzogXCLimplcIixcbiAgICB0cmFjZTogXCLihpJcIixcbiAgICBzdWNjZXNzOiBcIuKck1wiXG59O1xuZnVuY3Rpb24gZm9ybWF0U3RhY2soc3RhY2spIHtcbiAgICBjb25zdCBjd2QgPSBcImN3ZFwiIGluIHByb2Nlc3MgJiYgdHlwZW9mIHByb2Nlc3MuY3dkID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmN3ZCgpIDogXCJfX1Vua25vd25DV0RfX1wiO1xuICAgIHJldHVybiBcIiAgXCIgKyBzdGFjay5zcGxpdChcIlxcblwiKS5zcGxpY2UoMSkubWFwKChsKT0+bC50cmltKCkucmVwbGFjZShcImZpbGU6Ly9cIiwgXCJcIikucmVwbGFjZShjd2QgKyBcIi9cIiwgXCJcIikpLmpvaW4oXCJcXG4gIFwiKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICAgIGNvbnN0IGZtdEFyZ3MgPSBhcmdzLm1hcCgoYXJnKT0+e1xuICAgICAgICBpZiAoaXNPYmplY3QoYXJnKSAmJiB0eXBlb2YgYXJnLnN0YWNrID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnLm1lc3NhZ2UgKyBcIlxcblwiICsgZm9ybWF0U3RhY2soYXJnLnN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICAgICAgcmV0dXJuIGFyZztcbiAgICB9KTtcbiAgICByZXR1cm4gZm10QXJncy5tYXAoKGFyZyk9PntcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZywgbnVsbCwgNCk7XG4gICAgfSk7XG59XG5jb25zdCBsb2dnZXIgPSBjcmVhdGVDb25zb2xhKHtcbiAgICByZXBvcnRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgbG9nOiAobG9nT2JqKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdHlwZSwgdGFnLCBkYXRlLCBhcmdzIH0gPSBsb2dPYmo7XG4gICAgICAgICAgICAgICAgY29uc3QgaWNvbiA9IGljb25zW3R5cGVdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvZ1ByZWZpeCA9IGNvbG9yaXplKGAgJHtpY29ufSAke3RhZ30gJHtkYXRlLnRvTG9jYWxlVGltZVN0cmluZygpfSBgLCB0eXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IGZvcm1hdEFyZ3MoYXJncykuam9pbihcIiBcIikgLy8gY29uY2F0IGFsbCBhcmd1bWVudHMgdG8gb25lIHNwYWNlLXNlcGFyYXRlZCBzdHJpbmcgKGxpa2UgY29uc29sZSBkb2VzKVxuICAgICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKSAvLyBzcGxpdCBhbGwgdGhlIG5ld2xpbmVzIChlLmcuIGZyb20gbG9nZ2VkIEpTT04uc3RyaW5naWZpZWQgb2JqZWN0cylcbiAgICAgICAgICAgICAgICAubWFwKChsKT0+bG9nUHJlZml4ICsgXCIgXCIgKyBsKSAvLyBwcmVwZW5kIHRoZSBsb2cgcHJlZml4IHRvIGVhY2ggbGluZVxuICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpOyAvLyBqb2luIGFsbCB0aGUgbGluZXMgYmFjayB0b2dldGhlclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobGluZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICB0YWc6IFwiVVBMT0FEVEhJTkdcIlxuICAgIH1cbn0pO1xuY29uc3QgZWZmZWN0TG9nZ2VyTGV2ZWxUb0NvbnNvbGFMZXZlbCA9IHtcbiAgICBBbGw6IFwidmVyYm9zZVwiLFxuICAgIEZhdGFsOiBcImVycm9yXCIsXG4gICAgRXJyb3I6IFwiZXJyb3JcIixcbiAgICBJbmZvOiBcImluZm9cIixcbiAgICBEZWJ1ZzogXCJkZWJ1Z1wiLFxuICAgIFRyYWNlOiBcInRyYWNlXCIsXG4gICAgV2FybmluZzogXCJ3YXJuXCIsXG4gICAgTm9uZTogXCJzaWxlbnRcIlxufTtcbmNvbnN0IHdpdGhNaW5pbWFsTG9nTGV2ZWwgPSAobGV2ZWwgPSBcImluZm9cIik9PntcbiAgICBsb2dnZXIubGV2ZWwgPSBMb2dMZXZlbHNbbGV2ZWxdO1xuICAgIHJldHVybiBMb2dnZXIud2l0aE1pbmltdW1Mb2dMZXZlbCh7XG4gICAgICAgIHNpbGVudDogRWZmZWN0TG9nTGV2ZWwuTm9uZSxcbiAgICAgICAgZXJyb3I6IEVmZmVjdExvZ0xldmVsLkVycm9yLFxuICAgICAgICB3YXJuOiBFZmZlY3RMb2dMZXZlbC5XYXJuaW5nLFxuICAgICAgICBpbmZvOiBFZmZlY3RMb2dMZXZlbC5JbmZvLFxuICAgICAgICBkZWJ1ZzogRWZmZWN0TG9nTGV2ZWwuRGVidWcsXG4gICAgICAgIHRyYWNlOiBFZmZlY3RMb2dMZXZlbC5UcmFjZSxcbiAgICAgICAgdmVyYm9zZTogRWZmZWN0TG9nTGV2ZWwuQWxsXG4gICAgfVtsZXZlbF0pO1xufTtcbmNvbnN0IENvbnNvbGFMb2dnZXIgPSBMb2dnZXIucmVwbGFjZShMb2dnZXIuZGVmYXVsdExvZ2dlciwgTG9nZ2VyLm1ha2UoKHsgbG9nTGV2ZWwsIG1lc3NhZ2UgfSk9PntcbiAgICAvLyBGSVhNRTogUHJvYmFibHkgbG9nIG90aGVyIHN0dWZmIHRoYW4ganVzdCBtZXNzYWdlP1xuICAgIGxvZ2dlcltlZmZlY3RMb2dnZXJMZXZlbFRvQ29uc29sYUxldmVsW2xvZ0xldmVsLl90YWddXShtZXNzYWdlKTtcbn0pKTtcblxuY29uc3QgdXBsb2FkTXVsdGlwYXJ0ID0gKGZpbGUsIHByZXNpZ25lZCk9PkVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKGBVcGxvYWRpbmcgZmlsZSAke2ZpbGUubmFtZX0gd2l0aCAke3ByZXNpZ25lZC51cmxzLmxlbmd0aH0gY2h1bmtzIG9mIHNpemUgJHtwcmVzaWduZWQuY2h1bmtTaXplfSBieXRlcyBlYWNoYCk7XG4gICAgICAgIGNvbnN0IGV0YWdzID0geWllbGQqIEVmZmVjdC5mb3JFYWNoKHByZXNpZ25lZC51cmxzLCAodXJsLCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHByZXNpZ25lZC5jaHVua1NpemUgKiBpbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IE1hdGgubWluKG9mZnNldCArIHByZXNpZ25lZC5jaHVua1NpemUsIGZpbGUuc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IGZpbGUuc2xpY2Uob2Zmc2V0LCBlbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHVwbG9hZFBhcnQoe1xuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBjaHVuazogY2h1bmssXG4gICAgICAgICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uOiBwcmVzaWduZWQuY29udGVudERpc3Bvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmaWxlLnR5cGUsXG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzOiAxMCxcbiAgICAgICAgICAgICAgICBrZXk6IHByZXNpZ25lZC5rZXksXG4gICAgICAgICAgICAgICAgdXBsb2FkSWQ6IHByZXNpZ25lZC51cGxvYWRJZFxuICAgICAgICAgICAgfSkucGlwZShFZmZlY3QuYW5kVGhlbigoZXRhZyk9Pih7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogZXRhZyxcbiAgICAgICAgICAgICAgICAgICAgcGFydE51bWJlcjogaW5kZXggKyAxXG4gICAgICAgICAgICAgICAgfSkpLCBFZmZlY3QuY2F0Y2hUYWcoXCJSZXRyeUVycm9yXCIsIChlKT0+RWZmZWN0LmRpZShlKSkpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICBjb25jdXJyZW5jeTogXCJpbmhlcml0XCJcbiAgICAgICAgfSk7XG4gICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJGaWxlXCIsIGZpbGUubmFtZSwgXCJ1cGxvYWRlZCBzdWNjZXNzZnVsbHkuXCIpO1xuICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiQ29tcGxldGluZyBtdWx0aXBhcnQgdXBsb2FkLi4uXCIpO1xuICAgICAgICB5aWVsZCogY29tcGxldGVNdWx0aXBhcnRVcGxvYWQocHJlc2lnbmVkLCBldGFncyk7XG4gICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJNdWx0aXBhcnQgdXBsb2FkIGNvbXBsZXRlLlwiKTtcbiAgICB9KTtcbi8qKlxuICogVXNlZCBieSBzZXJ2ZXIgdXBsb2FkcyB3aGVyZSBwcm9ncmVzcyBpcyBub3QgbmVlZGVkLlxuICogVXNlcyBub3JtYWwgZmV0Y2ggQVBJLlxuICovIGNvbnN0IHVwbG9hZFBhcnQgPSAob3B0cyk9PmZldGNoRWZmKG9wdHMudXJsLCB7XG4gICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgYm9keTogb3B0cy5jaHVuayxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogb3B0cy5jb250ZW50VHlwZSxcbiAgICAgICAgICAgIFwiQ29udGVudC1EaXNwb3NpdGlvblwiOiBjb250ZW50RGlzcG9zaXRpb24ob3B0cy5jb250ZW50RGlzcG9zaXRpb24sIG9wdHMuZmlsZU5hbWUpXG4gICAgICAgIH1cbiAgICB9KS5waXBlKEVmZmVjdC5hbmRUaGVuKChyZXMpPT5yZXMub2sgJiYgcmVzLmhlYWRlcnMuZ2V0KFwiRXRhZ1wiKSA/IEVmZmVjdC5zdWNjZWVkKHJlcy5oZWFkZXJzLmdldChcIkV0YWdcIikpIDogRWZmZWN0LmZhaWwobmV3IFJldHJ5RXJyb3IoKSkpLCBFZmZlY3QucmV0cnkoe1xuICAgICAgICB3aGlsZTogKHJlcyk9PnJlcyBpbnN0YW5jZW9mIFJldHJ5RXJyb3IsXG4gICAgICAgIHNjaGVkdWxlOiBleHBvbmVudGlhbEJhY2tvZmYoKSxcbiAgICAgICAgdGltZXM6IG9wdHMubWF4UmV0cmllc1xuICAgIH0pLCBFZmZlY3QudGFwRXJyb3JUYWcoXCJSZXRyeUVycm9yXCIsICgpPT4vLyBNYXggcmV0cmllcyBleGNlZWRlZCwgdGVsbCBVVCBzZXJ2ZXIgdGhhdCB1cGxvYWQgZmFpbGVkXG4gICAgICAgIGFib3J0TXVsdGlwYXJ0VXBsb2FkKHtcbiAgICAgICAgICAgIGtleTogb3B0cy5rZXksXG4gICAgICAgICAgICB1cGxvYWRJZDogb3B0cy51cGxvYWRJZFxuICAgICAgICB9KS5waXBlKEVmZmVjdC5hbmRUaGVuKChyZXMpPT57XG4gICAgICAgICAgICBFZmZlY3QuZmFpbChuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogYEZhaWxlZCB0byB1cGxvYWQgZmlsZSAke29wdHMuZmlsZU5hbWV9IHRvIFMzYCxcbiAgICAgICAgICAgICAgICBjYXVzZTogcmVzXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKSkpO1xuY29uc3QgY29tcGxldGVNdWx0aXBhcnRVcGxvYWQgPSAocHJlc2lnbmVkLCBldGFncyk9PmZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2NvbXBsZXRlTXVsdGlwYXJ0XCIpLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGZpbGVLZXk6IHByZXNpZ25lZC5rZXksXG4gICAgICAgICAgICB1cGxvYWRJZDogcHJlc2lnbmVkLnVwbG9hZElkLFxuICAgICAgICAgICAgZXRhZ3NcbiAgICAgICAgfSksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH1cbiAgICB9KS5waXBlKEVmZmVjdC5hbmRUaGVuKHBhcnNlUmVzcG9uc2VKc29uKSwgRWZmZWN0LmFuZFRoZW4oUy5kZWNvZGVVbmtub3duKFMuU3RydWN0KHtcbiAgICAgICAgc3VjY2VzczogUy5Cb29sZWFuLFxuICAgICAgICBtZXNzYWdlOiBTLm9wdGlvbmFsKFMuU3RyaW5nKVxuICAgIH0pKSksIEVmZmVjdC53aXRoU3BhbihcImNvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkXCIsIHtcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgZXRhZ3MsXG4gICAgICAgICAgICBwcmVzaWduZWRcbiAgICAgICAgfVxuICAgIH0pKTtcbmNvbnN0IGFib3J0TXVsdGlwYXJ0VXBsb2FkID0gKHByZXNpZ25lZCk9PmZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2ZhaWx1cmVDYWxsYmFja1wiKSwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBmaWxlS2V5OiBwcmVzaWduZWQua2V5LFxuICAgICAgICAgICAgdXBsb2FkSWQ6IHByZXNpZ25lZC51cGxvYWRJZFxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfVxuICAgIH0pLnBpcGUoRWZmZWN0LmFuZFRoZW4ocGFyc2VSZXNwb25zZUpzb24pLCBFZmZlY3QuYW5kVGhlbihTLmRlY29kZVVua25vd24oRmFpbHVyZUNhbGxiYWNrUmVzcG9uc2UpKSwgRWZmZWN0LndpdGhTcGFuKFwiYWJvcnRNdWx0aXBhcnRVcGxvYWRcIiwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBwcmVzaWduZWRcbiAgICAgICAgfVxuICAgIH0pKTtcblxuZnVuY3Rpb24gZ2V0UGFyc2VGbihwYXJzZXIpIHtcbiAgICBpZiAodHlwZW9mIHBhcnNlci5wYXJzZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIucGFyc2U7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyc2VyXCIpO1xufVxuXG5jb25zdCBnZXRBcGlLZXkgPSAoYXBpS2V5KT0+e1xuICAgIGlmIChhcGlLZXkpIHJldHVybiBhcGlLZXk7XG4gICAgaWYgKHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVCkgcmV0dXJuIHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVDtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbmNvbnN0IGdldEFwaUtleU9yVGhyb3cgPSAoYXBpS2V5KT0+e1xuICAgIGNvbnN0IGtleSA9IGdldEFwaUtleShhcGlLZXkpO1xuICAgIGlmICgha2V5Py5zdGFydHNXaXRoKFwic2tfXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IFwiTUlTU0lOR19FTlZcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBvciBpbnZhbGlkIEFQSSBrZXkuIEFQSSBrZXlzIG11c3Qgc3RhcnQgd2l0aCBgc2tfYC5cIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn07XG5cbmNsYXNzIEZpbGVTaXplTWlzbWF0Y2ggZXh0ZW5kcyBEYXRhLkVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBtYXgsIGFjdHVhbCl7XG4gICAgICAgIGNvbnN0IHJlYXNvbiA9IGBZb3UgdXBsb2FkZWQgYSAke3R5cGV9IGZpbGUgdGhhdCB3YXMgJHtieXRlc1RvRmlsZVNpemUoYWN0dWFsKX0sIGJ1dCB0aGUgbGltaXQgZm9yIHRoYXQgdHlwZSBpcyAke21heH1gO1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICByZWFzb25cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RhZyA9IFwiRmlsZVNpemVNaXNtYXRjaFwiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkZpbGVTaXplTWlzbWF0Y2hFcnJvclwiO1xuICAgIH1cbn1cbmNsYXNzIEZpbGVDb3VudE1pc21hdGNoIGV4dGVuZHMgRGF0YS5FcnJvciB7XG4gICAgY29uc3RydWN0b3IodHlwZSwgYm91bmR0eXBlLCBib3VuZCwgYWN0dWFsKXtcbiAgICAgICAgY29uc3QgcmVhc29uID0gYFlvdSB1cGxvYWRlZCAke2FjdHVhbH0gZmlsZShzKSBvZiB0eXBlICcke3R5cGV9JywgYnV0IHRoZSAke2JvdW5kdHlwZX0gZm9yIHRoYXQgdHlwZSBpcyAke2JvdW5kfWA7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIHJlYXNvblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdGFnID0gXCJGaWxlQ291bnRNaXNtYXRjaFwiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkZpbGVDb3VudE1pc21hdGNoRXJyb3JcIjtcbiAgICB9XG59XG4vLyBWZXJpZnkgdGhhdCB0aGUgdXBsb2FkZWQgZmlsZXMgZG9lc24ndCB2aW9sYXRlIHRoZSByb3V0ZSBjb25maWcsXG4vLyBlLmcuIHVwbG9hZGluZyBtb3JlIHZpZGVvcyB0aGFuIGFsbG93ZWQsIG9yIGEgZmlsZSB0aGF0IGlzIGxhcmdlciB0aGFuIGFsbG93ZWQuXG4vLyBUaGlzIGlzIGRvdWJsZS1jaGVja2VkIG9uIGluZnJhIHNpZGUsIGJ1dCB3ZSB3YW50IHRvIGZhaWwgZWFybHkgdG8gYXZvaWQgbmV0d29yayBsYXRlbmN5LlxuY29uc3QgYXNzZXJ0RmlsZXNNZWV0Q29uZmlnID0gKGZpbGVzLCByb3V0ZUNvbmZpZyk9PkVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgICAgICBjb25zdCBjb3VudHMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKXtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB5aWVsZCogZ2V0VHlwZUZyb21GaWxlTmFtZShmaWxlLm5hbWUsIG9iamVjdEtleXMocm91dGVDb25maWcpKTtcbiAgICAgICAgICAgIGNvdW50c1t0eXBlXSA9IChjb3VudHNbdHlwZV0gPz8gMCkgKyAxO1xuICAgICAgICAgICAgY29uc3Qgc2l6ZUxpbWl0ID0gcm91dGVDb25maWdbdHlwZV0/Lm1heEZpbGVTaXplO1xuICAgICAgICAgICAgaWYgKCFzaXplTGltaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBJbnZhbGlkUm91dGVDb25maWdFcnJvcih0eXBlLCBcIm1heEZpbGVTaXplXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2l6ZUxpbWl0Qnl0ZXMgPSB5aWVsZCogZmlsZVNpemVUb0J5dGVzKHNpemVMaW1pdCk7XG4gICAgICAgICAgICBpZiAoZmlsZS5zaXplID4gc2l6ZUxpbWl0Qnl0ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBGaWxlU2l6ZU1pc21hdGNoKHR5cGUsIHNpemVMaW1pdCwgZmlsZS5zaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IoY29uc3QgX2tleSBpbiBjb3VudHMpe1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gX2tleTtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHJvdXRlQ29uZmlnW2tleV07XG4gICAgICAgICAgICBpZiAoIWNvbmZpZykgcmV0dXJuIHlpZWxkKiBuZXcgSW52YWxpZFJvdXRlQ29uZmlnRXJyb3Ioa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gY291bnRzW2tleV07XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBjb25maWcubWluRmlsZUNvdW50O1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gY29uZmlnLm1heEZpbGVDb3VudDtcbiAgICAgICAgICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgY29uZmlnIGR1cmluZyBmaWxlIGNvdW50IC0gbWluRmlsZUNvdW50ID4gbWF4RmlsZUNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBgbWluRmlsZUNvdW50IG11c3QgYmUgbGVzcyB0aGFuIG1heEZpbGVDb3VudCBmb3Iga2V5ICR7a2V5fS4gZ290OiAke21pbn0gPiAke21heH1gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY291bnQgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBGaWxlQ291bnRNaXNtYXRjaChrZXksIFwibWluaW11bVwiLCBtaW4sIGNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb3VudCA+IG1heCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogbmV3IEZpbGVDb3VudE1pc21hdGNoKGtleSwgXCJtYXhpbXVtXCIsIG1heCwgY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xuY2xhc3MgUmVxdWVzdElucHV0IGV4dGVuZHMgLyoqICNfX1BVUkVfXyAqLyBDb250ZXh0LlRhZyhcInVwbG9hZHRoaW5nL1JlcXVlc3RJbnB1dFwiKSgpIHtcbn1cbmNvbnN0IHBhcnNlQW5kVmFsaWRhdGVSZXF1ZXN0ID0gKGlucHV0LCBvcHRzLCBhZGFwdGVyKT0+RWZmZWN0LmdlbihmdW5jdGlvbiooKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHlpZWxkKiBFZmZlY3QuaXNFZmZlY3QoaW5wdXQucmVxKSA/IGlucHV0LnJlcSA6IEVmZmVjdC5zdWNjZWVkKGlucHV0LnJlcSk7XG4gICAgICAgIC8vIEdldCBpbnB1dHMgZnJvbSBxdWVyeSBhbmQgcGFyYW1zXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxLnVybCk7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSByZXEuaGVhZGVycztcbiAgICAgICAgY29uc3QgcGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgICAgICAgY29uc3QgYWN0aW9uID0gcGFyYW1zLmdldChcImFjdGlvblR5cGVcIik7XG4gICAgICAgIGNvbnN0IHNsdWcgPSBwYXJhbXMuZ2V0KFwic2x1Z1wiKTtcbiAgICAgICAgY29uc3QgaG9vayA9IGhlYWRlcnMuZ2V0KFwidXBsb2FkdGhpbmctaG9va1wiKTtcbiAgICAgICAgY29uc3QgdXRGcm9udGVuZFBhY2thZ2UgPSBoZWFkZXJzLmdldChcIngtdXBsb2FkdGhpbmctcGFja2FnZVwiKSA/PyBcInVua25vd25cIjtcbiAgICAgICAgY29uc3QgY2xpZW50VmVyc2lvbiA9IGhlYWRlcnMuZ2V0KFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCIpO1xuICAgICAgICBjb25zdCBhcGlLZXkgPSBnZXRBcGlLZXkob3B0cy5jb25maWc/LnVwbG9hZHRoaW5nU2VjcmV0KTtcbiAgICAgICAgaWYgKGNsaWVudFZlcnNpb24gIT0gbnVsbCAmJiBjbGllbnRWZXJzaW9uICE9PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0Vycm9yKGBDbGllbnQgdmVyc2lvbiBtaXNtYXRjaC4gU2VydmVyIHZlcnNpb246ICR7dmVyc2lvbn0sIENsaWVudCB2ZXJzaW9uOiAke2NsaWVudFZlcnNpb259YCk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDbGllbnQgdmVyc2lvbiBtaXNtYXRjaFwiLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBgU2VydmVyIHZlcnNpb246ICR7dmVyc2lvbn0sIENsaWVudCB2ZXJzaW9uOiAke2NsaWVudFZlcnNpb259YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzbHVnKSB7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0Vycm9yKFwiTm8gc2x1ZyBwcm92aWRlZCBpbiBwYXJhbXM6XCIsIHBhcmFtcyk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJObyBzbHVnIHByb3ZpZGVkIGluIHBhcmFtc1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2x1ZyAmJiB0eXBlb2Ygc2x1ZyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYEV4cGVjdGVkIHNsdWcgdG8gYmUgb2YgdHlwZSAnc3RyaW5nJywgZ290ICcke3R5cGVvZiBzbHVnfSdgO1xuICAgICAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dFcnJvcihtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiYHNsdWdgIG11c3QgYmUgYSBzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBjYXVzZTogbXNnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFwaUtleSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYE5vIHNlY3JldCBwcm92aWRlZCwgcGxlYXNlIHNldCBVUExPQURUSElOR19TRUNSRVQgaW4geW91ciBlbnYgZmlsZSBvciBpbiB0aGUgY29uZmlnYDtcbiAgICAgICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRXJyb3IobXNnKTtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgIGNvZGU6IFwiTUlTU0lOR19FTlZcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgTm8gc2VjcmV0IHByb3ZpZGVkYCxcbiAgICAgICAgICAgICAgICBjYXVzZTogbXNnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFwaUtleS5zdGFydHNXaXRoKFwic2tfXCIpKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgSW52YWxpZCBzZWNyZXQgcHJvdmlkZWQsIFVQTE9BRFRISU5HX1NFQ1JFVCBtdXN0IHN0YXJ0IHdpdGggJ3NrXydgO1xuICAgICAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dFcnJvcihtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJNSVNTSU5HX0VOVlwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBBUEkga2V5LiBBUEkga2V5cyBtdXN0IHN0YXJ0IHdpdGggJ3NrXycuXCIsXG4gICAgICAgICAgICAgICAgY2F1c2U6IG1zZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHV0RnJvbnRlbmRQYWNrYWdlICYmIHR5cGVvZiB1dEZyb250ZW5kUGFja2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYEV4cGVjdGVkIHgtdXBsb2FkdGhpbmctcGFja2FnZSB0byBiZSBvZiB0eXBlICdzdHJpbmcnLCBnb3QgJyR7dHlwZW9mIHV0RnJvbnRlbmRQYWNrYWdlfSdgO1xuICAgICAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dFcnJvcihtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiYHgtdXBsb2FkdGhpbmctcGFja2FnZWAgbXVzdCBiZSBhIHN0cmluZy4gZWcuICdAdXBsb2FkdGhpbmcvcmVhY3QnXCIsXG4gICAgICAgICAgICAgICAgY2F1c2U6IG1zZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXBsb2FkYWJsZSA9IG9wdHMucm91dGVyW3NsdWddO1xuICAgICAgICBpZiAoIXVwbG9hZGFibGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBObyBmaWxlIHJvdXRlIGZvdW5kIGZvciBzbHVnICR7c2x1Z31gO1xuICAgICAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dFcnJvcihtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJOT1RfRk9VTkRcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2dcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24gJiYgIWlzQWN0aW9uVHlwZShhY3Rpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgRXhwZWN0ZWQgJHtWQUxJRF9BQ1RJT05fVFlQRVMubWFwKCh4KT0+YFwiJHt4fVwiYCkuam9pbihcIiwgXCIpLnJlcGxhY2UoLywoPyEuKiwpLywgXCIgb3JcIil9IGJ1dCBnb3QgXCIke2FjdGlvbn1cImA7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0Vycm9yKFwiSW52YWxpZCBhY3Rpb24gdHlwZVwiLCBtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBgSW52YWxpZCBhY3Rpb24gdHlwZSAke2FjdGlvbn1gLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhvb2sgJiYgIWlzVXBsb2FkVGhpbmdIb29rKGhvb2spKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgRXhwZWN0ZWQgJHtWQUxJRF9VVF9IT09LUy5tYXAoKHgpPT5gXCIke3h9XCJgKS5qb2luKFwiLCBcIikucmVwbGFjZSgvLCg/IS4qLCkvLCBcIiBvclwiKX0gYnV0IGdvdCBcIiR7aG9va31cImA7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0Vycm9yKFwiSW52YWxpZCB1cGxvYWR0aGluZyBob29rXCIsIG1zZyk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICAgICAgY2F1c2U6IGBJbnZhbGlkIHVwbG9hZHRoaW5nIGhvb2sgJHtob29rfWAsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbXNnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFjdGlvbiAmJiAhaG9vayB8fCBhY3Rpb24gJiYgaG9vaykge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYEV4YWN0bHkgb25lIG9mICdhY3Rpb25UeXBlJyBvciAndXBsb2FkdGhpbmctaG9vaycgbXVzdCBiZSBwcm92aWRlZGA7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0Vycm9yKG1zZyk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogbXNnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwi4pyU77iOIEFsbCByZXF1ZXN0IGlucHV0IGlzIHZhbGlkXCIpO1xuICAgICAgICAvLyBGSVhNRTogVGhpcyBzaG91bGQgcHJvYmFibHkgcHJvdmlkZSB0aGUgZnVsbCBjb250ZXh0IGF0IG9uY2UgaW5zdGVhZCBvZlxuICAgICAgICAvLyBwYXJ0aWFsbHkgaW4gdGhlIGBydW5SZXF1ZXN0SGFuZGxlckFzeW5jYCBhbmQgcGFydGlhbGx5IGluIGhlcmUuLi5cbiAgICAgICAgLy8gUmVmOiBodHRwczovL2Rpc2NvcmQuY29tL2NoYW5uZWxzL0BtZS8xMjAxOTc3MTU0NTc3ODkxMzY5LzEyMDc0NDE4Mzk5NzI1NDg2NjlcbiAgICAgICAgY29uc3QgY29udGV4dFZhbHVlID0geWllbGQqIEZldGNoQ29udGV4dDtcbiAgICAgICAgY29udGV4dFZhbHVlLmJhc2VIZWFkZXJzW1wieC11cGxvYWR0aGluZy1hcGkta2V5XCJdID0gYXBpS2V5O1xuICAgICAgICBjb250ZXh0VmFsdWUuYmFzZUhlYWRlcnNbXCJ4LXVwbG9hZHRoaW5nLWZlLXBhY2thZ2VcIl0gPSB1dEZyb250ZW5kUGFja2FnZTtcbiAgICAgICAgY29udGV4dFZhbHVlLmJhc2VIZWFkZXJzW1wieC11cGxvYWR0aGluZy1iZS1hZGFwdGVyXCJdID0gYWRhcHRlcjtcbiAgICAgICAgY29uc3QgeyBpc0RldiA9IGlzRGV2ZWxvcG1lbnQgfSA9IG9wdHMuY29uZmlnID8/IHt9O1xuICAgICAgICBpZiAoaXNEZXYpIHlpZWxkKiBFZmZlY3QubG9nSW5mbyhcIlVwbG9hZFRoaW5nIGRldiBzZXJ2ZXIgaXMgbm93IHJ1bm5pbmchXCIpO1xuICAgICAgICBjb25zdCBiYXNlID0ge1xuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgY29uZmlnOiBvcHRzLmNvbmZpZyA/PyB7fSxcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcmdzOiBpbnB1dC5taWRkbGV3YXJlQXJncyxcbiAgICAgICAgICAgIGlzRGV2LFxuICAgICAgICAgICAgYXBpS2V5LFxuICAgICAgICAgICAgc2x1ZyxcbiAgICAgICAgICAgIHVwbG9hZGFibGUsXG4gICAgICAgICAgICBob29rOiBudWxsLFxuICAgICAgICAgICAgYWN0aW9uOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhY3Rpb24gPyB7XG4gICAgICAgICAgICAuLi5iYXNlLFxuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIC4uLmJhc2UsXG4gICAgICAgICAgICBob29rOiBob29rXG4gICAgICAgIH07XG4gICAgfSk7XG5cbmNvbnN0IHJlc29sdmVDYWxsYmFja1VybCA9IEVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgIGNvbnN0IHsgY29uZmlnLCByZXEsIGlzRGV2IH0gPSB5aWVsZCogUmVxdWVzdElucHV0O1xuICAgIGxldCBjYWxsYmFja1VybCA9IG5ldyBVUkwocmVxLnVybCk7XG4gICAgaWYgKGNvbmZpZz8uY2FsbGJhY2tVcmwpIHtcbiAgICAgICAgY2FsbGJhY2tVcmwgPSB5aWVsZCogZ2V0RnVsbEFwaVVybChjb25maWcuY2FsbGJhY2tVcmwpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuVVBMT0FEVEhJTkdfVVJMKSB7XG4gICAgICAgIGNhbGxiYWNrVXJsID0geWllbGQqIGdldEZ1bGxBcGlVcmwocHJvY2Vzcy5lbnYuVVBMT0FEVEhJTkdfVVJMKTtcbiAgICB9XG4gICAgaWYgKGlzRGV2IHx8ICFjYWxsYmFja1VybC5ob3N0LmluY2x1ZGVzKFwibG9jYWxob3N0XCIpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1VybDtcbiAgICB9XG4gICAgLy8gUHJvZHVjdGlvbiBidWlsZHMgaGF2ZSB0byBoYXZlIGEgcHVibGljIFVSTCBzbyBVVCBjYW4gc2VuZCB3ZWJob29rXG4gICAgLy8gUGFyc2UgdGhlIFVSTCBmcm9tIHRoZSBoZWFkZXJzXG4gICAgbGV0IHBhcnNlZEZyb21IZWFkZXJzID0gcmVxLmhlYWRlcnMuZ2V0KFwib3JpZ2luXCIpID8/IHJlcS5oZWFkZXJzLmdldChcInJlZmVyZXJcIikgPz8gcmVxLmhlYWRlcnMuZ2V0KFwiaG9zdFwiKSA/PyByZXEuaGVhZGVycy5nZXQoXCJ4LWZvcndhcmRlZC1ob3N0XCIpO1xuICAgIGlmIChwYXJzZWRGcm9tSGVhZGVycyAmJiAhcGFyc2VkRnJvbUhlYWRlcnMuaW5jbHVkZXMoXCJodHRwXCIpKSB7XG4gICAgICAgIHBhcnNlZEZyb21IZWFkZXJzID0gKHJlcS5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLXByb3RvXCIpID8/IFwiaHR0cHNcIikgKyBcIjovL1wiICsgcGFyc2VkRnJvbUhlYWRlcnM7XG4gICAgfVxuICAgIGlmICghcGFyc2VkRnJvbUhlYWRlcnMgfHwgcGFyc2VkRnJvbUhlYWRlcnMuaW5jbHVkZXMoXCJsb2NhbGhvc3RcIikpIHtcbiAgICAgICAgLy8gRGlkbid0IGZpbmQgYSB2YWxpZCBVUkwgaW4gdGhlIGhlYWRlcnMsIGxvZyBhIHdhcm5pbmcgYW5kIHVzZSB0aGUgb3JpZ2luYWwgdXJsIGFueXdheVxuICAgICAgICBFZmZlY3QubG9nV2FybmluZyhcIllvdSBhcmUgdXNpbmcgYSBsb2NhbGhvc3QgY2FsbGJhY2sgdXJsIGluIHByb2R1Y3Rpb24gd2hpY2ggaXMgbm90IHN1cHBvcnRlZC5cIiwgXCJSZWFkIG1vcmUgYW5kIGxlYXJuIGhvdyB0byBmaXggaXQgaGVyZTogaHR0cHM6Ly9kb2NzLnVwbG9hZHRoaW5nLmNvbS9mYXEjbXktY2FsbGJhY2stcnVucy1pbi1kZXZlbG9wbWVudC1idXQtbm90LWluLXByb2R1Y3Rpb25cIik7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1VybDtcbiAgICB9XG4gICAgcmV0dXJuIHlpZWxkKiBnZXRGdWxsQXBpVXJsKHBhcnNlZEZyb21IZWFkZXJzKTtcbn0pO1xuXG4vKipcbiAqIEFsbG93cyBhZGFwdGVycyB0byBiZSBmdWxseSBhc3luYy9hd2FpdCBpbnN0ZWFkIG9mIHByb3ZpZGluZyBzZXJ2aWNlcyBhbmQgcnVubmluZyBFZmZlY3QgcHJvZ3JhbXNcbiAqLyBjb25zdCBydW5SZXF1ZXN0SGFuZGxlckFzeW5jID0gKGhhbmRsZXIsIGFyZ3MsIGNvbmZpZyk9PmhhbmRsZXIoYXJncykucGlwZSh3aXRoTWluaW1hbExvZ0xldmVsKGNvbmZpZz8ubG9nTGV2ZWwpLCBFZmZlY3QucHJvdmlkZShDb25zb2xhTG9nZ2VyKSwgRWZmZWN0LnByb3ZpZGVTZXJ2aWNlKEZldGNoQ29udGV4dCwge1xuICAgICAgICBmZXRjaDogY29uZmlnPy5mZXRjaCA/PyBnbG9iYWxUaGlzLmZldGNoLFxuICAgICAgICBiYXNlSGVhZGVyczoge1xuICAgICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogdmVyc2lvbixcbiAgICAgICAgICAgIC8vIFRoZXNlIGFyZSBmaWxsZWQgaW4gbGF0ZXIgaW4gYHBhcnNlQW5kVmFsaWRhdGVSZXF1ZXN0YFxuICAgICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLWFwaS1rZXlcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLWJlLWFkYXB0ZXJcIjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLWZlLXBhY2thZ2VcIjogdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICB9KSwgYXNIYW5kbGVyT3V0cHV0LCBFZmZlY3QucnVuUHJvbWlzZSk7XG5jb25zdCBhc0hhbmRsZXJPdXRwdXQgPSAoZWZmZWN0KT0+RWZmZWN0LmNhdGNoQWxsKGVmZmVjdCwgKGVycm9yKT0+RWZmZWN0LnN1Y2NlZWQoe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICB9KSk7XG5jb25zdCBoYW5kbGVSZXF1ZXN0ID0gUmVxdWVzdElucHV0LnBpcGUoRWZmZWN0LmFuZFRoZW4oKHsgYWN0aW9uLCBob29rIH0pPT57XG4gICAgaWYgKGhvb2sgPT09IFwiY2FsbGJhY2tcIikgcmV0dXJuIGhhbmRsZUNhbGxiYWNrUmVxdWVzdDtcbiAgICBzd2l0Y2goYWN0aW9uKXtcbiAgICAgICAgY2FzZSBcInVwbG9hZFwiOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVVwbG9hZEFjdGlvbjtcbiAgICAgICAgY2FzZSBcIm11bHRpcGFydC1jb21wbGV0ZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU11bHRpcGFydENvbXBsZXRlQWN0aW9uO1xuICAgICAgICBjYXNlIFwiZmFpbHVyZVwiOlxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU11bHRpcGFydEZhaWx1cmVBY3Rpb247XG4gICAgfVxufSksIEVmZmVjdC5tYXAoKG91dHB1dCk9Pih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIC4uLm91dHB1dFxuICAgIH0pKSk7XG5jb25zdCBidWlsZFJlcXVlc3RIYW5kbGVyID0gKG9wdHMsIGFkYXB0ZXIpPT4oaW5wdXQpPT5oYW5kbGVSZXF1ZXN0LnBpcGUoRWZmZWN0LnByb3ZpZGVTZXJ2aWNlRWZmZWN0KFJlcXVlc3RJbnB1dCwgcGFyc2VBbmRWYWxpZGF0ZVJlcXVlc3QoaW5wdXQsIG9wdHMsIGFkYXB0ZXIpKSwgRWZmZWN0LmNhdGNoVGFncyh7XG4gICAgICAgICAgICBJbnZhbGlkSnNvbkVycm9yOiAoZSk9Pm5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHBhcnNpbmcgaW5wdXQvb3V0cHV0XCIsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBlXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBCYWRSZXF1ZXN0RXJyb3I6IChlKT0+RWZmZWN0LmZhaWwobmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlLmdldE1lc3NhZ2UoKSxcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGUuanNvblxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIEZldGNoRXJyb3I6IChlKT0+bmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB0eXBlb2YgZS5lcnJvciA9PT0gXCJzdHJpbmdcIiA/IGUuZXJyb3IgOiBlLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBlLmVycm9yXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBQYXJzZUVycm9yOiAoZSk9Pm5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJBbiBlcnJvciBvY2N1cmVkIHdoaWxlIHBhcnNpbmcgaW5wdXQvb3V0cHV0XCIsXG4gICAgICAgICAgICAgICAgICAgIGNhdXNlOiBlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSksIEVmZmVjdC50YXBFcnJvcigoZSk9PkVmZmVjdC5sb2dFcnJvcihlLm1lc3NhZ2UpKSk7XG5jb25zdCBoYW5kbGVDYWxsYmFja1JlcXVlc3QgPSBFZmZlY3QuZ2VuKGZ1bmN0aW9uKigpIHtcbiAgICBjb25zdCB7IHJlcSwgdXBsb2FkYWJsZSwgYXBpS2V5IH0gPSB5aWVsZCogUmVxdWVzdElucHV0O1xuICAgIGNvbnN0IHZlcmlmaWVkID0geWllbGQqIEVmZmVjdC50cnlQcm9taXNlKHtcbiAgICAgICAgdHJ5OiBhc3luYyAoKT0+dmVyaWZ5U2lnbmF0dXJlKGF3YWl0IHJlcS5jbG9uZSgpLnRleHQoKSwgcmVxLmhlYWRlcnMuZ2V0KFwieC11cGxvYWR0aGluZy1zaWduYXR1cmVcIiksIGFwaUtleSksXG4gICAgICAgIGNhdGNoOiAoKT0+bmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgc2lnbmF0dXJlXCJcbiAgICAgICAgICAgIH0pXG4gICAgfSk7XG4gICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIlNpZ25hdHVyZSB2ZXJpZmllZDpcIiwgdmVyaWZpZWQpO1xuICAgIGlmICghdmVyaWZpZWQpIHtcbiAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dFcnJvcihcIkludmFsaWQgc2lnbmF0dXJlXCIpO1xuICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBzaWduYXR1cmVcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdElucHV0ID0geWllbGQqIEVmZmVjdC5mbGF0TWFwKHBhcnNlUmVxdWVzdEpzb24ocmVxKSwgUy5kZWNvZGVVbmtub3duKFMuU3RydWN0KHtcbiAgICAgICAgc3RhdHVzOiBTLlN0cmluZyxcbiAgICAgICAgZmlsZTogVXBsb2FkZWRGaWxlRGF0YSxcbiAgICAgICAgbWV0YWRhdGE6IFMuUmVjb3JkKFMuU3RyaW5nLCBTLlVua25vd24pXG4gICAgfSkpKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiSGFuZGxpbmcgY2FsbGJhY2sgcmVxdWVzdCB3aXRoIGlucHV0OlwiLCByZXF1ZXN0SW5wdXQpO1xuICAgIGNvbnN0IHNlcnZlckRhdGEgPSB5aWVsZCogRWZmZWN0LnRyeVByb21pc2Uoe1xuICAgICAgICB0cnk6IGFzeW5jICgpPT51cGxvYWRhYmxlLnJlc29sdmVyKHtcbiAgICAgICAgICAgICAgICBmaWxlOiByZXF1ZXN0SW5wdXQuZmlsZSxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogcmVxdWVzdElucHV0Lm1ldGFkYXRhXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgY2F0Y2g6IChlcnJvcik9Pm5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHJ1biBvblVwbG9hZENvbXBsZXRlXCIsXG4gICAgICAgICAgICAgICAgY2F1c2U6IGVycm9yXG4gICAgICAgICAgICB9KVxuICAgIH0pLnBpcGUoRWZmZWN0LnRhcEVycm9yKChlcnJvcik9PkVmZmVjdC5sb2dFcnJvcihcIkZhaWxlZCB0byBydW4gb25VcGxvYWRDb21wbGV0ZS4gWW91IHByb2JhYmx5IHNob3VsZG4ndCBiZSB0aHJvd2luZyBlcnJvcnMgaGVyZS5cIiwgZXJyb3IpKSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgZmlsZUtleTogcmVxdWVzdElucHV0LmZpbGUua2V5LFxuICAgICAgICBjYWxsYmFja0RhdGE6IHNlcnZlckRhdGEgPz8gbnVsbFxuICAgIH07XG4gICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIidvblVwbG9hZENvbXBsZXRlJyBjYWxsYmFjayBmaW5pc2hlZC4gU2VuZGluZyByZXNwb25zZSB0byBVcGxvYWRUaGluZzpcIiwgcGF5bG9hZCk7XG4gICAgeWllbGQqIGZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL3NlcnZlckNhbGxiYWNrXCIpLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICB9XG4gICAgfSkucGlwZShFZmZlY3QuYW5kVGhlbihwYXJzZVJlc3BvbnNlSnNvbiksIEVmZmVjdC5hbmRUaGVuKFMuZGVjb2RlVW5rbm93bihTZXJ2ZXJDYWxsYmFja1Bvc3RSZXNwb25zZSkpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBib2R5OiBudWxsXG4gICAgfTtcbn0pO1xuY29uc3QgcnVuUm91dGVNaWRkbGV3YXJlID0gKG9wdHMpPT5FZmZlY3QuZ2VuKGZ1bmN0aW9uKigpIHtcbiAgICAgICAgY29uc3QgeyB1cGxvYWRhYmxlLCBtaWRkbGV3YXJlQXJncyB9ID0geWllbGQqIFJlcXVlc3RJbnB1dDtcbiAgICAgICAgY29uc3QgeyBmaWxlcywgaW5wdXQgfSA9IG9wdHM7XG4gICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJSdW5uaW5nIG1pZGRsZXdhcmVcIik7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0geWllbGQqIEVmZmVjdC50cnlQcm9taXNlKHtcbiAgICAgICAgICAgIHRyeTogYXN5bmMgKCk9PnVwbG9hZGFibGUuX2RlZi5taWRkbGV3YXJlKHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubWlkZGxld2FyZUFyZ3MsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgICAgICBmaWxlc1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY2F0Y2g6IChlcnJvcik9PmVycm9yIGluc3RhbmNlb2YgVXBsb2FkVGhpbmdFcnJvciA/IGVycm9yIDogbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBydW4gbWlkZGxld2FyZVwiLFxuICAgICAgICAgICAgICAgICAgICBjYXVzZTogZXJyb3JcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9KS5waXBlKEVmZmVjdC50YXBFcnJvcigoZXJyb3IpPT5FZmZlY3QubG9nRXJyb3IoXCJBbiBlcnJvciBvY2N1cmVkIGluIHlvdXIgbWlkZGxld2FyZSBmdW5jdGlvblwiLCBlcnJvcikpKTtcbiAgICAgICAgaWYgKG1ldGFkYXRhW1VURmlsZXNdICYmIG1ldGFkYXRhW1VURmlsZXNdLmxlbmd0aCAhPT0gZmlsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgRXhwZWN0ZWQgZmlsZXMgb3ZlcnJpZGUgdG8gaGF2ZSB0aGUgc2FtZSBsZW5ndGggYXMgb3JpZ2luYWwgZmlsZXMsIGdvdCAke21ldGFkYXRhW1VURmlsZXNdLmxlbmd0aH0gYnV0IGV4cGVjdGVkICR7ZmlsZXMubGVuZ3RofWA7XG4gICAgICAgICAgICB5aWVsZCogRWZmZWN0LmxvZ0Vycm9yKG1zZyk7XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGaWxlcyBvdmVycmlkZSBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoIGFzIGZpbGVzXCIsXG4gICAgICAgICAgICAgICAgY2F1c2U6IG1zZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXR0YWNoIGN1c3RvbUlkcyBmcm9tIG1pZGRsZXdhcmUgdG8gdGhlIGZpbGVzXG4gICAgICAgIGNvbnN0IGZpbGVzV2l0aEN1c3RvbUlkcyA9IHlpZWxkKiBFZmZlY3QuZm9yRWFjaChmaWxlcywgKGZpbGUsIGlkeCk9PkVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoZWlycyA9IG1ldGFkYXRhW1VURmlsZXNdPy5baWR4XTtcbiAgICAgICAgICAgICAgICBpZiAodGhlaXJzICYmIHRoZWlycy5zaXplICE9PSBmaWxlLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dXYXJuaW5nKFwiRmlsZSBzaXplIG1pc21hdGNoLiBSZXZlcnRpbmcgdG8gb3JpZ2luYWwgc2l6ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhlaXJzPy5uYW1lID8/IGZpbGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogZmlsZS5zaXplLFxuICAgICAgICAgICAgICAgICAgICBjdXN0b21JZDogdGhlaXJzPy5jdXN0b21JZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgIGZpbGVzV2l0aEN1c3RvbUlkc1xuICAgICAgICB9O1xuICAgIH0pO1xuY29uc3QgaGFuZGxlVXBsb2FkQWN0aW9uID0gRWZmZWN0LmdlbihmdW5jdGlvbiooKSB7XG4gICAgY29uc3Qgb3B0cyA9IHlpZWxkKiBSZXF1ZXN0SW5wdXQ7XG4gICAgY29uc3QgeyBmaWxlcywgaW5wdXQgfSA9IHlpZWxkKiBFZmZlY3QuZmxhdE1hcChwYXJzZVJlcXVlc3RKc29uKG9wdHMucmVxKSwgUy5kZWNvZGVVbmtub3duKFVwbG9hZEFjdGlvblBheWxvYWQpKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiSGFuZGxpbmcgdXBsb2FkIHJlcXVlc3Qgd2l0aCBpbnB1dDpcIiwge1xuICAgICAgICBmaWxlcyxcbiAgICAgICAgaW5wdXRcbiAgICB9KTtcbiAgICAvLyB2YWxpZGF0ZSB0aGUgaW5wdXRcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiUGFyc2luZyB1c2VyIGlucHV0XCIpO1xuICAgIGNvbnN0IGlucHV0UGFyc2VyID0gb3B0cy51cGxvYWRhYmxlLl9kZWYuaW5wdXRQYXJzZXI7XG4gICAgY29uc3QgcGFyc2VkSW5wdXQgPSB5aWVsZCogRWZmZWN0LnRyeVByb21pc2Uoe1xuICAgICAgICB0cnk6IGFzeW5jICgpPT5nZXRQYXJzZUZuKGlucHV0UGFyc2VyKShpbnB1dCksXG4gICAgICAgIGNhdGNoOiAoZXJyb3IpPT5uZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBpbnB1dFwiLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBlcnJvclxuICAgICAgICAgICAgfSlcbiAgICB9KS5waXBlKEVmZmVjdC50YXBFcnJvcigoZXJyb3IpPT5FZmZlY3QubG9nRXJyb3IoXCJBbiBlcnJvciBvY2N1cmVkIHRyeWluZyB0byBwYXJzZSBpbnB1dFwiLCBlcnJvcikpKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiSW5wdXQgcGFyc2VkIHN1Y2Nlc3NmdWxseVwiLCBwYXJzZWRJbnB1dCk7XG4gICAgY29uc3QgeyBtZXRhZGF0YSwgZmlsZXNXaXRoQ3VzdG9tSWRzIH0gPSB5aWVsZCogcnVuUm91dGVNaWRkbGV3YXJlKHtcbiAgICAgICAgaW5wdXQ6IHBhcnNlZElucHV0LFxuICAgICAgICBmaWxlc1xuICAgIH0pO1xuICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJQYXJzaW5nIHJvdXRlIGNvbmZpZ1wiLCBvcHRzLnVwbG9hZGFibGUuX2RlZi5yb3V0ZXJDb25maWcpO1xuICAgIGNvbnN0IHBhcnNlZENvbmZpZyA9IHlpZWxkKiBmaWxsSW5wdXRSb3V0ZUNvbmZpZyhvcHRzLnVwbG9hZGFibGUuX2RlZi5yb3V0ZXJDb25maWcpLnBpcGUoRWZmZWN0LmNhdGNoVGFnKFwiSW52YWxpZFJvdXRlQ29uZmlnXCIsIChlcnIpPT5uZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgY29uZmlnXCIsXG4gICAgICAgICAgICBjYXVzZTogZXJyXG4gICAgICAgIH0pKSk7XG4gICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIlJvdXRlIGNvbmZpZyBwYXJzZWQgc3VjY2Vzc2Z1bGx5XCIsIHBhcnNlZENvbmZpZyk7XG4gICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIlZhbGlkYXRpbmcgZmlsZXMgbWVldCB0aGUgY29uZmlnIHJlcXVpcmVtZW50c1wiLCBmaWxlcyk7XG4gICAgeWllbGQqIGFzc2VydEZpbGVzTWVldENvbmZpZyhmaWxlcywgcGFyc2VkQ29uZmlnKS5waXBlKEVmZmVjdC5jYXRjaEFsbCgoZSk9Pm5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIGNvbmZpZzogJHtlLl90YWd9YCxcbiAgICAgICAgICAgIGNhdXNlOiBcInJlYXNvblwiIGluIGUgPyBlLnJlYXNvbiA6IGUubWVzc2FnZVxuICAgICAgICB9KSkpO1xuICAgIGNvbnN0IGNhbGxiYWNrVXJsID0geWllbGQqIHJlc29sdmVDYWxsYmFja1VybC5waXBlKEVmZmVjdC50YXBFcnJvcigoZXJyb3IpPT5FZmZlY3QubG9nRXJyb3IoXCJGYWlsZWQgdG8gcmVzb2x2ZSBjYWxsYmFjayBVUkxcIiwgZXJyb3IpKSwgRWZmZWN0LmNhdGNoVGFnKFwiSW52YWxpZFVSTFwiLCAoZXJyKT0+bmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgIH0pKSk7XG4gICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIlJldHJpZXZpbmcgcHJlc2lnbmVkIFVSTHMgZnJvbSBVcGxvYWRUaGluZy4gQ2FsbGJhY2sgVVJMIGlzOlwiLCBjYWxsYmFja1VybC5ocmVmKTtcbiAgICBjb25zdCBwcmVzaWduZWRVcmxzID0geWllbGQqIGZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL3ByZXBhcmVVcGxvYWRcIiksIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgZmlsZXM6IGZpbGVzV2l0aEN1c3RvbUlkcyxcbiAgICAgICAgICAgIHJvdXRlQ29uZmlnOiBwYXJzZWRDb25maWcsXG4gICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgIGNhbGxiYWNrVXJsOiBjYWxsYmFja1VybC5vcmlnaW4gKyBjYWxsYmFja1VybC5wYXRobmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrU2x1Zzogb3B0cy5zbHVnXG4gICAgICAgIH0pLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICB9XG4gICAgfSkucGlwZShFZmZlY3QuYW5kVGhlbihwYXJzZVJlc3BvbnNlSnNvbiksIEVmZmVjdC5hbmRUaGVuKFMuZGVjb2RlVW5rbm93bihQcmVzaWduZWRVUkxSZXNwb25zZSkpKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiVXBsb2FkVGhpbmcgcmVzcG9uZGVkIHdpdGg6XCIsIHByZXNpZ25lZFVybHMpO1xuICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJTZW5kaW5nIHByZXNpZ25lZCBVUkxzIHRvIGNsaWVudFwiKTtcbiAgICBsZXQgcHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICBpZiAob3B0cy5pc0Rldikge1xuICAgICAgICBjb25zdCBmZXRjaENvbnRleHQgPSB5aWVsZCogRmV0Y2hDb250ZXh0O1xuICAgICAgICBwcm9taXNlID0gRWZmZWN0LmZvckVhY2gocHJlc2lnbmVkVXJscywgKGZpbGUpPT5jb25kaXRpb25hbERldlNlcnZlcihmaWxlLmtleSwgb3B0cy5hcGlLZXkpLCB7XG4gICAgICAgICAgICBjb25jdXJyZW5jeTogMTBcbiAgICAgICAgfSkucGlwZShFZmZlY3QucHJvdmlkZShDb25zb2xhTG9nZ2VyKSwgRWZmZWN0LnByb3ZpZGVTZXJ2aWNlKEZldGNoQ29udGV4dCwgZmV0Y2hDb250ZXh0KSwgRWZmZWN0LnJ1blByb21pc2UpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBib2R5OiBwcmVzaWduZWRVcmxzLFxuICAgICAgICBjbGVhbnVwOiBwcm9taXNlXG4gICAgfTtcbn0pO1xuY29uc3QgaGFuZGxlTXVsdGlwYXJ0Q29tcGxldGVBY3Rpb24gPSBFZmZlY3QuZ2VuKGZ1bmN0aW9uKigpIHtcbiAgICBjb25zdCBvcHRzID0geWllbGQqIFJlcXVlc3RJbnB1dDtcbiAgICBjb25zdCByZXF1ZXN0SW5wdXQgPSB5aWVsZCogRWZmZWN0LmZsYXRNYXAocGFyc2VSZXF1ZXN0SnNvbihvcHRzLnJlcSksIFMuZGVjb2RlVW5rbm93bihNdWx0aXBhcnRDb21wbGV0ZUFjdGlvblBheWxvYWQpKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiSGFuZGxpbmcgbXVsdGlwYXJ0LWNvbXBsZXRlIHJlcXVlc3Qgd2l0aCBpbnB1dDpcIiwgcmVxdWVzdElucHV0KTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiTm90aWZ5aW5nIFVwbG9hZFRoaW5nIHRoYXQgbXVsdGlwYXJ0IHVwbG9hZCBpcyBjb21wbGV0ZVwiKTtcbiAgICBjb25zdCBjb21wbGV0aW9uUmVzcG9uc2UgPSB5aWVsZCogY29tcGxldGVNdWx0aXBhcnRVcGxvYWQoe1xuICAgICAgICBrZXk6IHJlcXVlc3RJbnB1dC5maWxlS2V5LFxuICAgICAgICB1cGxvYWRJZDogcmVxdWVzdElucHV0LnVwbG9hZElkXG4gICAgfSwgcmVxdWVzdElucHV0LmV0YWdzKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiVXBsb2FkVGhpbmcgcmVzcG9uZGVkIHdpdGg6XCIsIGNvbXBsZXRpb25SZXNwb25zZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9keTogbnVsbFxuICAgIH07XG59KTtcbmNvbnN0IGhhbmRsZU11bHRpcGFydEZhaWx1cmVBY3Rpb24gPSBFZmZlY3QuZ2VuKGZ1bmN0aW9uKigpIHtcbiAgICBjb25zdCB7IHJlcSwgdXBsb2FkYWJsZSB9ID0geWllbGQqIFJlcXVlc3RJbnB1dDtcbiAgICBjb25zdCB7IGZpbGVLZXksIHVwbG9hZElkIH0gPSB5aWVsZCogRWZmZWN0LmZsYXRNYXAocGFyc2VSZXF1ZXN0SnNvbihyZXEpLCBTLmRlY29kZVVua25vd24oRmFpbHVyZUFjdGlvblBheWxvYWQpKTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiSGFuZGxpbmcgZmFpbHVyZSByZXF1ZXN0IHdpdGggaW5wdXQ6XCIsIHtcbiAgICAgICAgZmlsZUtleSxcbiAgICAgICAgdXBsb2FkSWRcbiAgICB9KTtcbiAgICB5aWVsZCogRWZmZWN0LmxvZ0RlYnVnKFwiTm90aWZ5aW5nIFVwbG9hZFRoaW5nIHRoYXQgdXBsb2FkIGZhaWxlZFwiKTtcbiAgICBjb25zdCBmYWlsdXJlUmVzcG9uc2UgPSB5aWVsZCogYWJvcnRNdWx0aXBhcnRVcGxvYWQoe1xuICAgICAgICBrZXk6IGZpbGVLZXksXG4gICAgICAgIHVwbG9hZElkXG4gICAgfSk7XG4gICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIlVwbG9hZFRoaW5nIHJlc3BvbmRlZCB3aXRoOlwiLCBmYWlsdXJlUmVzcG9uc2UpO1xuICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJSdW5uaW5nICdvblVwbG9hZEVycm9yJyBjYWxsYmFja1wiKTtcbiAgICB5aWVsZCogRWZmZWN0LnRyeSh7XG4gICAgICAgIHRyeTogKCk9PntcbiAgICAgICAgICAgIHVwbG9hZGFibGUuX2RlZi5vblVwbG9hZEVycm9yKHtcbiAgICAgICAgICAgICAgICBlcnJvcjogbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIlVQTE9BRF9GQUlMRURcIixcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFVwbG9hZCBmYWlsZWQgZm9yICR7ZmlsZUtleX1gXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZmlsZUtleVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNhdGNoOiAoZXJyb3IpPT5uZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBydW4gb25VcGxvYWRFcnJvclwiLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBlcnJvclxuICAgICAgICAgICAgfSlcbiAgICB9KS5waXBlKEVmZmVjdC50YXBFcnJvcigoZXJyb3IpPT5FZmZlY3QubG9nRXJyb3IoXCJGYWlsZWQgdG8gcnVuIG9uVXBsb2FkRXJyb3IuIFlvdSBwcm9iYWJseSBzaG91bGRuJ3QgYmUgdGhyb3dpbmcgZXJyb3JzIGhlcmUuXCIsIGVycm9yKSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvZHk6IG51bGxcbiAgICB9O1xufSk7XG5jb25zdCBidWlsZFBlcm1pc3Npb25zSW5mb0hhbmRsZXIgPSAob3B0cyk9PntcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgY29uc3QgcGVybWlzc2lvbnMgPSBvYmplY3RLZXlzKG9wdHMucm91dGVyKS5tYXAoKHNsdWcpPT57XG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9IG9wdHMucm91dGVyW3NsdWddO1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gRWZmZWN0LnJ1blN5bmMoZmlsbElucHV0Um91dGVDb25maWcocm91dGUuX2RlZi5yb3V0ZXJDb25maWcpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2x1ZyxcbiAgICAgICAgICAgICAgICBjb25maWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGVybWlzc2lvbnM7XG4gICAgfTtcbn07XG5cbmZ1bmN0aW9uIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbiAgICBsZXQgbWFqb3I7XG4gICAgbGV0IG1pbm9yO1xuICAgIGNvbnN0IG1heWJlTm9kZVZlcnNpb24gPSBwcm9jZXNzLnZlcnNpb25zPy5ub2RlPy5zcGxpdChcIi5cIik7XG4gICAgaWYgKG1heWJlTm9kZVZlcnNpb24pIHtcbiAgICAgICAgW21ham9yLCBtaW5vcl0gPSBtYXliZU5vZGVWZXJzaW9uLm1hcCgodik9PnBhcnNlSW50KHYsIDEwKSk7XG4gICAgfVxuICAgIGNvbnN0IG1heWJlTm9kZVBhdGggPSBwcm9jZXNzLmVudj8uTk9ERTtcbiAgICBpZiAoIW1ham9yICYmIG1heWJlTm9kZVBhdGgpIHtcbiAgICAgICAgY29uc3Qgbm9kZVZlcnNpb24gPSAvdihcXGQrKVxcLihcXGQrKVxcLihcXGQrKS8uZXhlYyhtYXliZU5vZGVQYXRoKT8uWzBdO1xuICAgICAgICBpZiAobm9kZVZlcnNpb24pIHtcbiAgICAgICAgICAgIFttYWpvciwgbWlub3JdID0gbm9kZVZlcnNpb24uc3Vic3RyaW5nKDEpLnNwbGl0KFwiLlwiKS5tYXAoKHYpPT5wYXJzZUludCh2LCAxMCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbWFqb3IgfHwgIW1pbm9yKSByZXR1cm47XG4gICAgLy8gUmVxdWlyZSBeMTguMTMuMFxuICAgIGlmIChtYWpvciA+IDE4KSByZXR1cm47XG4gICAgaWYgKG1ham9yID09PSAxOCAmJiBtaW5vciA+PSAxMykgcmV0dXJuO1xuICAgIEVmZmVjdC5ydW5TeW5jKEVmZmVjdC5sb2dFcnJvcihgWU9VIEFSRSBVU0lORyBBIExFR0FDWSAoJHttYWpvcn0uJHttaW5vcn0pIE5PREUgVkVSU0lPTiBXSElDSCBJU04nVCBPRkZJQ0lBTExZIFNVUFBPUlRFRC4gUExFQVNFIFVQR1JBREUgVE8gTk9ERSBeMTguMTMuYCkpO1xuICAgIC8vIEtpbGwgdGhlIHByb2Nlc3MgaWYgaXQgaXNuJ3QgZ29pbmcgdG8gd29yayBjb3JyZWN0bHkgYW55d2F5XG4gICAgLy8gSWYgd2UndmUgZ290dGVuIHRoaXMgZmFyIHdlIGtub3cgd2UgaGF2ZSBhIE5vZGUuanMgcnVudGltZSBzbyBleGl0IGlzIGRlZmluZWQuIE92ZXJyaWRlIHN0ZC1lbnYgdHlwZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICBwcm9jZXNzLmV4aXQ/LigxKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKGluaXREZWYgPSB7fSkge1xuICAgIGNvbnN0IF9kZWYgPSB7XG4gICAgICAgIC8vIERlZmF1bHQgcm91dGVyIGNvbmZpZ1xuICAgICAgICByb3V0ZXJDb25maWc6IHtcbiAgICAgICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgICAgICAgbWF4RmlsZVNpemU6IFwiNE1CXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5wdXRQYXJzZXI6IHtcbiAgICAgICAgICAgIHBhcnNlOiAoKT0+dW5kZWZpbmVkLFxuICAgICAgICAgICAgX2lucHV0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBfb3V0cHV0OiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgbWlkZGxld2FyZTogKCk9Pih7fSksXG4gICAgICAgIG9uVXBsb2FkRXJyb3I6ICgpPT4oe30pLFxuICAgICAgICBlcnJvckZvcm1hdHRlcjogaW5pdERlZi5lcnJvckZvcm1hdHRlciA/PyBkZWZhdWx0RXJyb3JGb3JtYXR0ZXIsXG4gICAgICAgIC8vIE92ZXJsb2FkIHdpdGggcHJvcGVydGllcyBwYXNzZWQgaW5cbiAgICAgICAgLi4uaW5pdERlZlxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5wdXQgKHVzZXJQYXJzZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcm5hbENyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAgICAgICAgIC4uLl9kZWYsXG4gICAgICAgICAgICAgICAgaW5wdXRQYXJzZXI6IHVzZXJQYXJzZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtaWRkbGV3YXJlICh1c2VyTWlkZGxld2FyZSkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgICAgICAgICAgLi4uX2RlZixcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlOiB1c2VyTWlkZGxld2FyZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVXBsb2FkQ29tcGxldGUgKHVzZXJVcGxvYWRDb21wbGV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBfZGVmLFxuICAgICAgICAgICAgICAgIHJlc29sdmVyOiB1c2VyVXBsb2FkQ29tcGxldGVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIG9uVXBsb2FkRXJyb3IgKHVzZXJPblVwbG9hZEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICAuLi5fZGVmLFxuICAgICAgICAgICAgICAgIG9uVXBsb2FkRXJyb3I6IHVzZXJPblVwbG9hZEVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVCdWlsZGVyKG9wdHMpIHtcbiAgICByZXR1cm4gKGlucHV0KT0+e1xuICAgICAgICByZXR1cm4gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKHtcbiAgICAgICAgICAgIHJvdXRlckNvbmZpZzogaW5wdXQsXG4gICAgICAgICAgICAuLi5vcHRzXG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbi8qKlxuICogRXh0ZW5zaW9uIG9mIHRoZSBCbG9iIGNsYXNzIHRoYXQgc2ltcGxpZmllcyBzZXR0aW5nIHRoZSBgbmFtZWAgYW5kIGBjdXN0b21JZGAgcHJvcGVydGllcyxcbiAqIHNpbWlsYXIgdG8gdGhlIGJ1aWx0LWluIEZpbGUgY2xhc3MgZnJvbSBOb2RlID4gMjAuXG4gKi8gY2xhc3MgVVRGaWxlIGV4dGVuZHMgQmxvYiB7XG4gICAgY29uc3RydWN0b3IocGFydHMsIG5hbWUsIG9wdGlvbnMpe1xuICAgICAgICBjb25zdCBvcHRpb25zV2l0aERlZmF1bHRzID0ge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHR5cGU6IG9wdGlvbnM/LnR5cGUgPz8gKGxvb2t1cChuYW1lKSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiKSxcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZDogb3B0aW9ucz8ubGFzdE1vZGlmaWVkID8/IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgc3VwZXIocGFydHMsIG9wdGlvbnNXaXRoRGVmYXVsdHMpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmN1c3RvbUlkID0gb3B0aW9uc1dpdGhEZWZhdWx0cy5jdXN0b21JZDtcbiAgICAgICAgdGhpcy5sYXN0TW9kaWZpZWQgPSBvcHRpb25zV2l0aERlZmF1bHRzLmxhc3RNb2RpZmllZDtcbiAgICB9XG59XG5cbmNvbnN0IHVwbG9hZFByZXNpZ25lZFBvc3QgPSAoZmlsZSwgcHJlc2lnbmVkKT0+RWZmZWN0LmdlbihmdW5jdGlvbiooKSB7XG4gICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoYFVwbG9hZGluZyBmaWxlICR7ZmlsZS5uYW1lfSB1c2luZyBwcmVzaWduZWQgUE9TVCBVUkxgKTtcbiAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMocHJlc2lnbmVkLmZpZWxkcykuZm9yRWFjaCgoW2ssIHZdKT0+Zm9ybURhdGEuYXBwZW5kKGssIHYpKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKFwiZmlsZVwiLCBmaWxlKTsgLy8gRmlsZSBkYXRhICoqTVVTVCBHTyBMQVNUKipcbiAgICAgICAgY29uc3QgcmVzID0geWllbGQqIGZldGNoRWZmKHByZXNpZ25lZC51cmwsIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24veG1sXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pLnBpcGUoRWZmZWN0LnRhcEVycm9yQ2F1c2UoKCk9PmZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL2ZhaWx1cmVDYWxsYmFja1wiKSwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBmaWxlS2V5OiBwcmVzaWduZWQua2V5LFxuICAgICAgICAgICAgICAgICAgICB1cGxvYWRJZDogbnVsbFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5waXBlKEVmZmVjdC5hbmRUaGVuKHBhcnNlUmVzcG9uc2VKc29uKSwgRWZmZWN0LmFuZFRoZW4oUy5kZWNvZGVVbmtub3duKEZhaWx1cmVDYWxsYmFja1Jlc3BvbnNlKSkpKSk7XG4gICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0geWllbGQqIEVmZmVjdC5wcm9taXNlKHJlcy50ZXh0KTtcbiAgICAgICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRXJyb3IoYEZhaWxlZCB0byB1cGxvYWQgZmlsZSAke2ZpbGUubmFtZX0gdG8gcHJlc2lnbmVkIFBPU1QgVVJMLiBSZXNwb25zZTogJHt0ZXh0fWApO1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiBuZXcgVXBsb2FkVGhpbmdFcnJvcih7XG4gICAgICAgICAgICAgICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gdXBsb2FkIGZpbGVcIixcbiAgICAgICAgICAgICAgICBjYXVzZTogdGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIkZpbGVcIiwgZmlsZS5uYW1lLCBcInVwbG9hZGVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICB9KTtcblxuZnVuY3Rpb24gZ3VhcmRTZXJ2ZXJPbmx5KCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgIGNvZGU6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIlRoZSBgdXRhcGlgIGNhbiBvbmx5IGJlIHVzZWQgb24gdGhlIHNlcnZlci5cIlxuICAgICAgICB9KTtcbiAgICB9XG59XG5jb25zdCB1cGxvYWRGaWxlc0ludGVybmFsID0gKGlucHV0KT0+Z2V0UHJlc2lnbmVkVXJscyhpbnB1dCkucGlwZShFZmZlY3QuYW5kVGhlbigocHJlc2lnbmVkcyk9PkVmZmVjdC5mb3JFYWNoKHByZXNpZ25lZHMsIChmaWxlKT0+dXBsb2FkRmlsZShmaWxlKS5waXBlKEVmZmVjdC50YXBFcnJvcigoZXJyb3IpPT5FZmZlY3QubG9nRXJyb3IoXCJVcGxvYWQgZmFpbGVkOlwiLCBlcnJvcikpLCBFZmZlY3QubWF0Y2goe1xuICAgICAgICAgICAgICAgIG9uRmFpbHVyZTogKGVycm9yKT0+KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogVXBsb2FkVGhpbmdFcnJvci50b09iamVjdChlcnJvciBpbnN0YW5jZW9mIFVwbG9hZFRoaW5nRXJyb3IgPyBlcnJvciA6IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byB1cGxvYWQgZmlsZS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F1c2U6IGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzOiAoZGF0YSk9Pih7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pKSwge1xuICAgICAgICAgICAgY29uY3VycmVuY3k6IDEwXG4gICAgICAgIH0pKSk7XG4vKipcbiAqIEZJWE1FOiBkb3dubG9hZGluZyBldmVyeXRoaW5nIGludG8gbWVtb3J5IGFuZCB0aGVuIHVwbG9hZFxuICogaXNuJ3QgdGhlIGJlc3QuIFdlIHNob3VsZCBzdXBwb3J0IHN0cmVhbXMgc28gd2UgY2FuIGRvd25sb2FkXG4gKiBqdXN0IGFzIG11Y2ggYXMgd2UgbmVlZCBhdCBhbnkgdGltZS5cbiAqLyBjb25zdCBkb3dubG9hZEZpbGVzID0gKHVybHMsIGRvd25sb2FkRXJyb3JzKT0+RWZmZWN0LmZvckVhY2godXJscywgKF91cmwsIGlkeCk9PkVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgbGV0IHVybCA9IGlzT2JqZWN0KF91cmwpID8gX3VybC51cmwgOiBfdXJsO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBkYXRhdXJscyB3aWxsIHJlc3VsdCBpbiBuYW1lIGJlaW5nIHRvbyBsb25nLCB0ZWxsIHRoZSB1c2VyXG4gICAgICAgICAgICAgICAgLy8gdG8gdXNlIHVwbG9hZEZpbGVzIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgaWYgKHVybC5zdGFydHNXaXRoKFwiZGF0YTpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRFcnJvcnNbaWR4XSA9IFVwbG9hZFRoaW5nRXJyb3IudG9PYmplY3QobmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJQbGVhc2UgdXNlIHVwbG9hZEZpbGVzKCkgZm9yIGRhdGEgVVJMcy4gdXBsb2FkRmlsZXNGcm9tVXJsKCkgaXMgaW50ZW5kZWQgZm9yIHVzZSB3aXRoIHJlbW90ZSBVUkxzIG9ubHkuXCJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWUgPSB1cmwucGF0aG5hbWUuc3BsaXQoXCIvXCIpLnBvcCgpID8/IFwidW5rbm93bi1maWxlbmFtZVwiLCBjdXN0b21JZCA9IHVuZGVmaW5lZCB9ID0gaXNPYmplY3QoX3VybCkgPyBfdXJsIDoge307XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHlpZWxkKiBmZXRjaEVmZih1cmwpO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIGRvd25sb2FkRXJyb3JzW2lkeF0gPSBVcGxvYWRUaGluZ0Vycm9yLnRvT2JqZWN0KG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBkb3dubG9hZCByZXF1ZXN0ZWQgZmlsZS5cIixcbiAgICAgICAgICAgICAgICAgICAgY2F1c2U6IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIEVmZmVjdC5wcm9taXNlKCgpPT5yZXNwb25zZS5ibG9iKCkpLnBpcGUoRWZmZWN0LmFuZFRoZW4oKGJsb2IpPT5uZXcgVVRGaWxlKFtcbiAgICAgICAgICAgICAgICAgICAgYmxvYlxuICAgICAgICAgICAgICAgIF0sIG5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tSWRcbiAgICAgICAgICAgICAgICB9KSkpO1xuICAgICAgICB9KSwge1xuICAgICAgICBjb25jdXJyZW5jeTogMTBcbiAgICB9KTtcbmNvbnN0IGdldFByZXNpZ25lZFVybHMgPSAoaW5wdXQpPT5FZmZlY3QuZ2VuKGZ1bmN0aW9uKigpIHtcbiAgICAgICAgY29uc3QgeyBmaWxlcywgbWV0YWRhdGEsIGNvbnRlbnREaXNwb3NpdGlvbiwgYWNsIH0gPSBpbnB1dDtcbiAgICAgICAgY29uc3QgZmlsZURhdGEgPSBmaWxlcy5tYXAoKGZpbGUpPT4oe1xuICAgICAgICAgICAgICAgIG5hbWU6IGZpbGUubmFtZSA/PyBcInVubmFtZWQtYmxvYlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IGZpbGUudHlwZSxcbiAgICAgICAgICAgICAgICBzaXplOiBmaWxlLnNpemUsXG4gICAgICAgICAgICAgICAgLi4uXCJjdXN0b21JZFwiIGluIGZpbGUgPyB7XG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbUlkOiBmaWxlLmN1c3RvbUlkXG4gICAgICAgICAgICAgICAgfSA6IHt9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIHlpZWxkKiBFZmZlY3QubG9nRGVidWcoXCJHZXR0aW5nIHByZXNpZ25lZCBVUkxzIGZvciBmaWxlc1wiLCBmaWxlRGF0YSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlU2NoZW1hID0gUy5TdHJ1Y3Qoe1xuICAgICAgICAgICAgZGF0YTogUHJlc2lnbmVkVVJMUmVzcG9uc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHByZXNpZ25lZHMgPSB5aWVsZCogZmV0Y2hFZmYoZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChcIi9hcGkvdXBsb2FkRmlsZXNcIiksIHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBjYWNoZTogXCJuby1zdG9yZVwiLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIGZpbGVzOiBmaWxlRGF0YSxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YSxcbiAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgYWNsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5waXBlKEVmZmVjdC5hbmRUaGVuKHBhcnNlUmVzcG9uc2VKc29uKSwgRWZmZWN0LmFuZFRoZW4oUy5kZWNvZGVVbmtub3duKHJlc3BvbnNlU2NoZW1hKSksIEVmZmVjdC5jYXRjaFRhZyhcIlBhcnNlRXJyb3JcIiwgKGUpPT5FZmZlY3QuZGllKGUpKSwgRWZmZWN0LmNhdGNoVGFnKFwiRmV0Y2hFcnJvclwiLCAoZSk9PkVmZmVjdC5kaWUoZSkpKTtcbiAgICAgICAgeWllbGQqIEVmZmVjdC5sb2dEZWJ1ZyhcIkdvdCBwcmVzaWduZWQgVVJMczpcIiwgcHJlc2lnbmVkcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIGZpbGVzLm1hcCgoZmlsZSwgaSk9Pih7XG4gICAgICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgICAgICBwcmVzaWduZWQ6IHByZXNpZ25lZHMuZGF0YVtpXVxuICAgICAgICAgICAgfSkpO1xuICAgIH0pO1xuY29uc3QgdXBsb2FkRmlsZSA9IChpbnB1dCk9PkVmZmVjdC5nZW4oZnVuY3Rpb24qKCkge1xuICAgICAgICBjb25zdCB7IGZpbGUsIHByZXNpZ25lZCB9ID0gaW5wdXQ7XG4gICAgICAgIGlmIChcInVybHNcIiBpbiBwcmVzaWduZWQpIHtcbiAgICAgICAgICAgIHlpZWxkKiB1cGxvYWRNdWx0aXBhcnQoZmlsZSwgcHJlc2lnbmVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHlpZWxkKiB1cGxvYWRQcmVzaWduZWRQb3N0KGZpbGUsIHByZXNpZ25lZCk7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIGZldGNoRWZmKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoYC9hcGkvcG9sbFVwbG9hZC8ke3ByZXNpZ25lZC5rZXl9YCkpLnBpcGUoRWZmZWN0LmFuZFRoZW4ocGFyc2VSZXNwb25zZUpzb24pLCBFZmZlY3QuYW5kVGhlbihTLmRlY29kZVVua25vd24oUG9sbFVwbG9hZFJlc3BvbnNlKSksIEVmZmVjdC50YXAoRWZmZWN0LmxvZ0RlYnVnKFwiUG9sbGVkIHVwbG9hZFwiLCBwcmVzaWduZWQua2V5KSksIEVmZmVjdC5hbmRUaGVuKChyZXMpPT5yZXMuc3RhdHVzID09PSBcImRvbmVcIiA/IEVmZmVjdC5zdWNjZWVkKHVuZGVmaW5lZCkgOiBFZmZlY3QuZmFpbChuZXcgUmV0cnlFcnJvcigpKSksIEVmZmVjdC5yZXRyeSh7XG4gICAgICAgICAgICB3aGlsZTogKGVycik9PmVyciBpbnN0YW5jZW9mIFJldHJ5RXJyb3IsXG4gICAgICAgICAgICBzY2hlZHVsZTogZXhwb25lbnRpYWxCYWNrb2ZmKClcbiAgICAgICAgfSksIEVmZmVjdC5jYXRjaFRhZyhcIlJldHJ5RXJyb3JcIiwgKGUpPT5FZmZlY3QuZGllKGUpKSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHByZXNpZ25lZC5rZXksXG4gICAgICAgICAgICB1cmw6IHByZXNpZ25lZC5maWxlVXJsLFxuICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgc2l6ZTogZmlsZS5zaXplLFxuICAgICAgICAgICAgdHlwZTogZmlsZS50eXBlLFxuICAgICAgICAgICAgY3VzdG9tSWQ6IFwiY3VzdG9tSWRcIiBpbiBmaWxlID8gZmlsZS5jdXN0b21JZCA/PyBudWxsIDogbnVsbFxuICAgICAgICB9O1xuICAgIH0pO1xuZnVuY3Rpb24gcGFyc2VUaW1lVG9TZWNvbmRzKHRpbWUpIHtcbiAgICBjb25zdCBtYXRjaCA9IHRpbWUudG9TdHJpbmcoKS5zcGxpdCgvKFxcZCspLykuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGNvbnN0IG51bSA9IE51bWJlcihtYXRjaFswXSk7XG4gICAgY29uc3QgdW5pdCA9IChtYXRjaFsxXSA/PyBcInNcIikudHJpbSgpLnNsaWNlKDAsIDEpO1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSB7XG4gICAgICAgIHM6IDEsXG4gICAgICAgIG06IDYwLFxuICAgICAgICBoOiAzNjAwLFxuICAgICAgICBkOiA4NjQwMFxuICAgIH1bdW5pdF07XG4gICAgcmV0dXJuIG51bSAqIG11bHRpcGxpZXI7XG59XG5cbmNsYXNzIFVUQXBpIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKXtcbiAgICAgICAgdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcgPSAocGF0aG5hbWUsIGJvZHksIHJlc3BvbnNlU2NoZW1hKT0+e1xuICAgICAgICAgICAgY29uc3QgdXJsID0gZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChwYXRobmFtZSk7XG4gICAgICAgICAgICBFZmZlY3QucnVuU3luYyhFZmZlY3QubG9nRGVidWcoXCJSZXF1ZXN0aW5nIFVwbG9hZFRoaW5nOlwiLCB7XG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogdGhpcy5kZWZhdWx0SGVhZGVyc1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKFtcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmRlZmF1bHRIZWFkZXJzKSl7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikgaGVhZGVycy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmV0Y2hFZmYodXJsLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBjYWNoZTogXCJuby1zdG9yZVwiLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgIH0pLnBpcGUoRWZmZWN0LmFuZFRoZW4ocGFyc2VSZXNwb25zZUpzb24pLCBFZmZlY3QuYW5kVGhlbihTLmRlY29kZVVua25vd24ocmVzcG9uc2VTY2hlbWEpKSwgRWZmZWN0LmNhdGNoVGFnKFwiRmV0Y2hFcnJvclwiLCAoZXJyKT0+RWZmZWN0LmxvZ0Vycm9yKFwiUmVxdWVzdCBmYWlsZWQ6XCIsIGVycikucGlwZShFZmZlY3QuYW5kVGhlbigoKT0+RWZmZWN0LmRpZShlcnIpKSkpLCBFZmZlY3QuY2F0Y2hUYWcoXCJQYXJzZUVycm9yXCIsIChlcnIpPT5FZmZlY3QubG9nRXJyb3IoXCJSZXNwb25zZSBwYXJzaW5nIGZhaWxlZDpcIiwgZXJyKS5waXBlKEVmZmVjdC5hbmRUaGVuKCgpPT5FZmZlY3QuZGllKGVycikpKSksIEVmZmVjdC50YXAoKHJlcyk9PkVmZmVjdC5sb2dEZWJ1ZyhcIlVwbG9hZFRoaW5nIHJlc3BvbnNlOlwiLCByZXMpKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZXhlY3V0ZUFzeW5jID0gKHByb2dyYW0pPT5wcm9ncmFtLnBpcGUod2l0aE1pbmltYWxMb2dMZXZlbCh0aGlzLmxvZ0xldmVsKSwgRWZmZWN0LnByb3ZpZGUoQ29uc29sYUxvZ2dlciksIEVmZmVjdC5wcm92aWRlU2VydmljZShGZXRjaENvbnRleHQsIHtcbiAgICAgICAgICAgICAgICBmZXRjaDogdGhpcy5mZXRjaCxcbiAgICAgICAgICAgICAgICBiYXNlSGVhZGVyczogdGhpcy5kZWZhdWx0SGVhZGVyc1xuICAgICAgICAgICAgfSksIEVmZmVjdC5ydW5Qcm9taXNlKTtcbiAgICAgICAgLyoqXG4gICAqIFJlcXVlc3QgdG8gZGVsZXRlIGZpbGVzIGZyb20gVXBsb2FkVGhpbmcgc3RvcmFnZS5cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBzdHJpbmdbXX0gZmlsZUtleXNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgZGVsZXRlRmlsZXMoXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIpO1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBhd2FpdCBkZWxldGVGaWxlcyhbXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIsXCIxNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiXSlcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgZGVsZXRlRmlsZXMoXCJteUN1c3RvbUlkZW50aWZpZXJcIiwgeyBrZXlUeXBlOiBcImN1c3RvbUlkXCIgfSlcbiAgICovIHRoaXMuZGVsZXRlRmlsZXMgPSBhc3luYyAoa2V5cywgb3B0cyk9PntcbiAgICAgICAgICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgICAgICAgICAgY29uc3QgeyBrZXlUeXBlID0gdGhpcy5kZWZhdWx0S2V5VHlwZSB9ID0gb3B0cyA/PyB7fTtcbiAgICAgICAgICAgIGNsYXNzIERlbGV0ZUZpbGVSZXNwb25zZSBleHRlbmRzIFMuQ2xhc3MoXCJEZWxldGVGaWxlUmVzcG9uc2VcIikoe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IFMuQm9vbGVhbixcbiAgICAgICAgICAgICAgICBkZWxldGVkQ291bnQ6IFMuTnVtYmVyXG4gICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXN5bmModGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXCIvYXBpL2RlbGV0ZUZpbGVzXCIsIGtleVR5cGUgPT09IFwiZmlsZUtleVwiID8ge1xuICAgICAgICAgICAgICAgIGZpbGVLZXlzOiBhc0FycmF5KGtleXMpXG4gICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgIGN1c3RvbUlkczogYXNBcnJheShrZXlzKVxuICAgICAgICAgICAgfSwgRGVsZXRlRmlsZVJlc3BvbnNlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgKiBSZXF1ZXN0IGZpbGUgVVJMcyBmcm9tIFVwbG9hZFRoaW5nIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IGZpbGVLZXlzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRGaWxlVXJscyhcIjJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIik7XG4gICAqIGNvbnNvbGUubG9nKGRhdGEpOyAvLyBbe2tleTogXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIsIHVybDogXCJodHRwczovL3VwbG9hZHRoaW5nLmNvbS9mLzJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIn1dXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRGaWxlVXJscyhbXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIsXCIxNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiXSlcbiAgICogY29uc29sZS5sb2coZGF0YSkgLy8gW3trZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8yZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIgfSx7a2V5OiBcIjE2NDkzNTNiLTA0ZWEtNDhhMi05ZGI3LTMxZGU3ZjU2MmM4ZF9pbWFnZTIuanBnXCIsIHVybDogXCJodHRwczovL3VwbG9hZHRoaW5nLmNvbS9mLzE2NDkzNTNiLTA0ZWEtNDhhMi05ZGI3LTMxZGU3ZjU2MmM4ZF9pbWFnZTIuanBnXCJ9XVxuICAgKi8gdGhpcy5nZXRGaWxlVXJscyA9IGFzeW5jIChrZXlzLCBvcHRzKT0+e1xuICAgICAgICAgICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgICAgICAgICBjb25zdCB7IGtleVR5cGUgPSB0aGlzLmRlZmF1bHRLZXlUeXBlIH0gPSBvcHRzID8/IHt9O1xuICAgICAgICAgICAgY2xhc3MgR2V0RmlsZVVybFJlc3BvbnNlIGV4dGVuZHMgUy5DbGFzcyhcIkdldEZpbGVVcmxSZXNwb25zZVwiKSh7XG4gICAgICAgICAgICAgICAgZGF0YTogUy5BcnJheShTLlN0cnVjdCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogUy5TdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogUy5TdHJpbmdcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBc3luYyh0aGlzLnJlcXVlc3RVcGxvYWRUaGluZyhcIi9hcGkvZ2V0RmlsZVVybFwiLCBrZXlUeXBlID09PSBcImZpbGVLZXlcIiA/IHtcbiAgICAgICAgICAgICAgICBmaWxlS2V5czoga2V5c1xuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBjdXN0b21JZHM6IGtleXNcbiAgICAgICAgICAgIH0sIEdldEZpbGVVcmxSZXNwb25zZSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICogUmVxdWVzdCBmaWxlIGxpc3QgZnJvbSBVcGxvYWRUaGluZyBzdG9yYWdlLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0c1xuICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5saW1pdCBUaGUgbWF4aW11bSBudW1iZXIgb2YgZmlsZXMgdG8gcmV0dXJuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLm9mZnNldCBUaGUgbnVtYmVyIG9mIGZpbGVzIHRvIHNraXBcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgZGF0YSA9IGF3YWl0IGxpc3RGaWxlcyh7IGxpbWl0OiAxIH0pO1xuICAgKiBjb25zb2xlLmxvZyhkYXRhKTsgLy8geyBrZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCBpZDogXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhcIiB9XG4gICAqLyB0aGlzLmxpc3RGaWxlcyA9IGFzeW5jIChvcHRzKT0+e1xuICAgICAgICAgICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgICAgICAgICBjbGFzcyBMaXN0RmlsZVJlc3BvbnNlIGV4dGVuZHMgUy5DbGFzcyhcIkxpc3RGaWxlUmVzcG9uc2VcIikoe1xuICAgICAgICAgICAgICAgIGhhc01vcmU6IFMuQm9vbGVhbixcbiAgICAgICAgICAgICAgICBmaWxlczogUy5BcnJheShTLlN0cnVjdCh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBTLlN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tSWQ6IFMuTnVsbE9yKFMuU3RyaW5nKSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBTLlN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogUy5TdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogUy5MaXRlcmFsKFwiRGVsZXRpb24gUGVuZGluZ1wiLCBcIkZhaWxlZFwiLCBcIlVwbG9hZGVkXCIsIFwiVXBsb2FkaW5nXCIpXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXN5bmModGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXCIvYXBpL2xpc3RGaWxlc1wiLCB7XG4gICAgICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICAgICAgfSwgTGlzdEZpbGVSZXNwb25zZSkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnJlbmFtZUZpbGVzID0gYXN5bmMgKHVwZGF0ZXMpPT57XG4gICAgICAgICAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICAgICAgICAgIGNsYXNzIFJlbmFtZUZpbGVSZXNwb25zZSBleHRlbmRzIFMuQ2xhc3MoXCJSZW5hbWVGaWxlUmVzcG9uc2VcIikoe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IFMuQm9vbGVhblxuICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUFzeW5jKHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFwiL2FwaS9yZW5hbWVGaWxlc1wiLCB7XG4gICAgICAgICAgICAgICAgdXBkYXRlczogYXNBcnJheSh1cGRhdGVzKVxuICAgICAgICAgICAgfSwgUmVuYW1lRmlsZVJlc3BvbnNlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIHJlbmFtZUZpbGVzfSBpbnN0ZWFkLiAqLyB0aGlzLnJlbmFtZUZpbGUgPSB0aGlzLnJlbmFtZUZpbGVzO1xuICAgICAgICB0aGlzLmdldFVzYWdlSW5mbyA9IGFzeW5jICgpPT57XG4gICAgICAgICAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICAgICAgICAgIGNsYXNzIEdldFVzYWdlSW5mb1Jlc3BvbnNlIGV4dGVuZHMgUy5DbGFzcyhcIkdldFVzYWdlSW5mb1Jlc3BvbnNlXCIpKHtcbiAgICAgICAgICAgICAgICB0b3RhbEJ5dGVzOiBTLk51bWJlcixcbiAgICAgICAgICAgICAgICBhcHBUb3RhbEJ5dGVzOiBTLk51bWJlcixcbiAgICAgICAgICAgICAgICBmaWxlc1VwbG9hZGVkOiBTLk51bWJlcixcbiAgICAgICAgICAgICAgICBsaW1pdEJ5dGVzOiBTLk51bWJlclxuICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUFzeW5jKHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFwiL2FwaS9nZXRVc2FnZUluZm9cIiwge30sIEdldFVzYWdlSW5mb1Jlc3BvbnNlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBSZXF1ZXN0IGEgcHJlc2lnbmVkIHVybCBmb3IgYSBwcml2YXRlIGZpbGUocykgKi8gdGhpcy5nZXRTaWduZWRVUkwgPSBhc3luYyAoa2V5LCBvcHRzKT0+e1xuICAgICAgICAgICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgICAgICAgICBjb25zdCBleHBpcmVzSW4gPSBvcHRzPy5leHBpcmVzSW4gPyBwYXJzZVRpbWVUb1NlY29uZHMob3B0cy5leHBpcmVzSW4pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgeyBrZXlUeXBlID0gdGhpcy5kZWZhdWx0S2V5VHlwZSB9ID0gb3B0cyA/PyB7fTtcbiAgICAgICAgICAgIGlmIChvcHRzPy5leHBpcmVzSW4gJiYgaXNOYU4oZXhwaXJlc0luKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcImV4cGlyZXNJbiBtdXN0IGJlIGEgdmFsaWQgdGltZSBzdHJpbmcsIGZvciBleGFtcGxlICcxZCcsICcyIGRheXMnLCBvciBhIG51bWJlciBvZiBzZWNvbmRzLlwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhwaXJlc0luICYmIGV4cGlyZXNJbiA+IDg2NDAwICogNykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcImV4cGlyZXNJbiBtdXN0IGJlIGxlc3MgdGhhbiA3IGRheXMgKDYwNDgwMCBzZWNvbmRzKS5cIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xhc3MgR2V0U2lnbmVkVXJsUmVzcG9uc2UgZXh0ZW5kcyBTLkNsYXNzKFwiR2V0U2lnbmVkVXJsUmVzcG9uc2VcIikoe1xuICAgICAgICAgICAgICAgIHVybDogUy5TdHJpbmdcbiAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBc3luYyh0aGlzLnJlcXVlc3RVcGxvYWRUaGluZyhcIi9hcGkvcmVxdWVzdEZpbGVBY2Nlc3NcIiwga2V5VHlwZSA9PT0gXCJmaWxlS2V5XCIgPyB7XG4gICAgICAgICAgICAgICAgZmlsZUtleToga2V5LFxuICAgICAgICAgICAgICAgIGV4cGlyZXNJblxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBjdXN0b21JZDoga2V5LFxuICAgICAgICAgICAgICAgIGV4cGlyZXNJblxuICAgICAgICAgICAgfSwgR2V0U2lnbmVkVXJsUmVzcG9uc2UpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgQUNMIG9mIGEgZmlsZSBvciBzZXQgb2YgZmlsZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIE1ha2UgYSBzaW5nbGUgZmlsZSBwdWJsaWNcbiAgICogYXdhaXQgdXRhcGkudXBkYXRlQUNMKFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCBcInB1YmxpYy1yZWFkXCIpO1xuICAgKlxuICAgKiAvLyBNYWtlIG11bHRpcGxlIGZpbGVzIHByaXZhdGVcbiAgICogYXdhaXQgdXRhcGkudXBkYXRlQUNMKFxuICAgKiAgIFtcbiAgICogICAgIFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFxuICAgKiAgICAgXCIxNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiLFxuICAgKiAgIF0sXG4gICAqICAgXCJwcml2YXRlXCIsXG4gICAqICk7XG4gICAqLyB0aGlzLnVwZGF0ZUFDTCA9IGFzeW5jIChrZXlzLCBhY2wsIG9wdHMpPT57XG4gICAgICAgICAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICAgICAgICAgIGNvbnN0IHsga2V5VHlwZSA9IHRoaXMuZGVmYXVsdEtleVR5cGUgfSA9IG9wdHMgPz8ge307XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzID0gYXNBcnJheShrZXlzKS5tYXAoKGtleSk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5VHlwZSA9PT0gXCJmaWxlS2V5XCIgPyB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVLZXk6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgYWNsXG4gICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tSWQ6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgYWNsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VTY2hlbWEgPSBTLlN0cnVjdCh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogUy5Cb29sZWFuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBc3luYyh0aGlzLnJlcXVlc3RVcGxvYWRUaGluZyhcIi9hcGkvdXBkYXRlQUNMXCIsIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVzXG4gICAgICAgICAgICB9LCByZXNwb25zZVNjaGVtYSkpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBBc3NlcnQgc29tZSBzdHVmZlxuICAgICAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICAgICAgaW5jb21wYXRpYmxlTm9kZUd1YXJkKCk7XG4gICAgICAgIGNvbnN0IGFwaUtleSA9IGdldEFwaUtleU9yVGhyb3cob3B0cz8uYXBpS2V5KTtcbiAgICAgICAgdGhpcy5mZXRjaCA9IG9wdHM/LmZldGNoID8/IGdsb2JhbFRoaXMuZmV0Y2g7XG4gICAgICAgIHRoaXMuZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgICAgICAgICBcIngtdXBsb2FkdGhpbmctYXBpLWtleVwiOiBhcGlLZXksXG4gICAgICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiB2ZXJzaW9uLFxuICAgICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLWJlLWFkYXB0ZXJcIjogXCJzZXJ2ZXItc2RrXCIsXG4gICAgICAgICAgICBcIngtdXBsb2FkdGhpbmctZmUtcGFja2FnZVwiOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZWZhdWx0S2V5VHlwZSA9IG9wdHM/LmRlZmF1bHRLZXlUeXBlID8/IFwiZmlsZUtleVwiO1xuICAgICAgICB0aGlzLmxvZ0xldmVsID0gb3B0cz8ubG9nTGV2ZWw7XG4gICAgfVxuICAgIGFzeW5jIHVwbG9hZEZpbGVzKGZpbGVzLCBvcHRzKSB7XG4gICAgICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgICAgICBjb25zdCB1cGxvYWRzID0gYXdhaXQgdGhpcy5leGVjdXRlQXN5bmMoRWZmZWN0LmZsYXRNYXAodXBsb2FkRmlsZXNJbnRlcm5hbCh7XG4gICAgICAgICAgICBmaWxlczogYXNBcnJheShmaWxlcyksXG4gICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb246IG9wdHM/LmNvbnRlbnREaXNwb3NpdGlvbiA/PyBcImlubGluZVwiLFxuICAgICAgICAgICAgbWV0YWRhdGE6IG9wdHM/Lm1ldGFkYXRhID8/IHt9LFxuICAgICAgICAgICAgYWNsOiBvcHRzPy5hY2xcbiAgICAgICAgfSksICh1cHMpPT5FZmZlY3Quc3VjY2VlZChBcnJheS5pc0FycmF5KGZpbGVzKSA/IHVwcyA6IHVwc1swXSkpLnBpcGUoRWZmZWN0LnRhcCgocmVzKT0+RWZmZWN0LmxvZ0RlYnVnKFwiRmluaXNoZWQgdXBsb2FkaW5nOlwiLCByZXMpKSkpO1xuICAgICAgICByZXR1cm4gdXBsb2FkcztcbiAgICB9XG4gICAgYXN5bmMgdXBsb2FkRmlsZXNGcm9tVXJsKHVybHMsIG9wdHMpIHtcbiAgICAgICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgICAgIGNvbnN0IGRvd25sb2FkRXJyb3JzID0ge307XG4gICAgICAgIGNvbnN0IHVwbG9hZHMgPSBhd2FpdCB0aGlzLmV4ZWN1dGVBc3luYyhkb3dubG9hZEZpbGVzKGFzQXJyYXkodXJscyksIGRvd25sb2FkRXJyb3JzKS5waXBlKEVmZmVjdC5hbmRUaGVuKChmaWxlcyk9PmZpbGVzLmZpbHRlcigoZik9PmYgIT0gbnVsbCkpLCBFZmZlY3QuYW5kVGhlbigoZmlsZXMpPT51cGxvYWRGaWxlc0ludGVybmFsKHtcbiAgICAgICAgICAgICAgICBmaWxlcyxcbiAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb246IG9wdHM/LmNvbnRlbnREaXNwb3NpdGlvbiA/PyBcImlubGluZVwiLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBvcHRzPy5tZXRhZGF0YSA/PyB7fSxcbiAgICAgICAgICAgICAgICBhY2w6IG9wdHM/LmFjbFxuICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgIC8qKiBQdXQgaXQgYWxsIGJhY2sgdG9nZXRoZXIsIHByZXNlcnZlIHRoZSBvcmRlciBvZiBmaWxlcyAqLyBjb25zdCByZXNwb25zZXMgPSBhc0FycmF5KHVybHMpLm1hcCgoXywgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoZG93bmxvYWRFcnJvcnNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGRvd25sb2FkRXJyb3JzW2luZGV4XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXBsb2Fkcy5zaGlmdCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgLyoqIFJldHVybiBzaW5nbGUgb2JqZWN0IG9yIGFycmF5IGJhc2VkIG9uIGlucHV0IHVybHMgKi8gY29uc3QgdXBsb2FkRmlsZVJlc3BvbnNlID0gQXJyYXkuaXNBcnJheSh1cmxzKSA/IHJlc3BvbnNlcyA6IHJlc3BvbnNlc1swXTtcbiAgICAgICAgRWZmZWN0LnJ1blN5bmMoRWZmZWN0LmxvZ0RlYnVnKFwiRmluaXNoZWQgdXBsb2FkaW5nOlwiLCB1cGxvYWRGaWxlUmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuIHVwbG9hZEZpbGVSZXNwb25zZTtcbiAgICB9XG59XG5cbmNvbnN0IGNyZWF0ZVVwbG9hZHRoaW5nID0gKG9wdHMpPT5jcmVhdGVCdWlsZGVyKG9wdHMpO1xuLyoqIEBpbnRlcm5hbCAqLyBjb25zdCBJTlRFUk5BTF9ET19OT1RfVVNFX2NyZWF0ZVJvdXRlSGFuZGxlckNvcmUgPSAob3B0cywgYWRhcHRlcik9PntcbiAgICBpbmNvbXBhdGlibGVOb2RlR3VhcmQoKTtcbiAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IGJ1aWxkUmVxdWVzdEhhbmRsZXIob3B0cywgYWRhcHRlcik7XG4gICAgY29uc3QgZ2V0QnVpbGRQZXJtcyA9IGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcihvcHRzKTtcbiAgICBjb25zdCBQT1NUID0gYXN5bmMgKHJlcXVlc3QpPT57XG4gICAgICAgIGNvbnN0IHJlcSA9IHJlcXVlc3QgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gcmVxdWVzdCA6IHJlcXVlc3QucmVxdWVzdDtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBydW5SZXF1ZXN0SGFuZGxlckFzeW5jKHJlcXVlc3RIYW5kbGVyLCB7XG4gICAgICAgICAgICByZXEsXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJnczoge1xuICAgICAgICAgICAgICAgIHJlcSxcbiAgICAgICAgICAgICAgICBldmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHJlczogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdHMuY29uZmlnKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzcG9uc2UuanNvbihmb3JtYXRFcnJvcihyZXNwb25zZS5lcnJvciwgb3B0cy5yb3V0ZXIpLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBnZXRTdGF0dXNDb2RlRnJvbUVycm9yKHJlc3BvbnNlLmVycm9yKSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IHZlcnNpb25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXMgPSBSZXNwb25zZS5qc29uKHJlc3BvbnNlLmJvZHksIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiB2ZXJzaW9uXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhpcyBpcyBhIGN1c3RvbSBwcm9wZXJ0eVxuICAgICAgICByZXMuY2xlYW51cCA9IHJlc3BvbnNlLmNsZWFudXA7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgICBjb25zdCBHRVQgPSAocmVxdWVzdCk9PntcbiAgICAgICAgcmV0dXJuIFJlc3BvbnNlLmpzb24oZ2V0QnVpbGRQZXJtcygpLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogdmVyc2lvblxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIEdFVCxcbiAgICAgICAgUE9TVFxuICAgIH07XG59O1xuY29uc3QgY3JlYXRlUm91dGVIYW5kbGVyID0gKG9wdHMpPT5JTlRFUk5BTF9ET19OT1RfVVNFX2NyZWF0ZVJvdXRlSGFuZGxlckNvcmUob3B0cywgXCJzZXJ2ZXJcIik7XG5jb25zdCBleHRyYWN0Um91dGVyQ29uZmlnID0gKHJvdXRlcik9PmJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcih7XG4gICAgICAgIHJvdXRlclxuICAgIH0pKCk7XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgY3JlYXRlUm91dGVIYW5kbGVyfSBpbnN0ZWFkXG4gKi8gY29uc3QgY3JlYXRlU2VydmVySGFuZGxlciA9IGNyZWF0ZVJvdXRlSGFuZGxlcjtcblxuZXhwb3J0IHsgSU5URVJOQUxfRE9fTk9UX1VTRV9jcmVhdGVSb3V0ZUhhbmRsZXJDb3JlLCBVVEFwaSwgVVRGaWxlLCBjcmVhdGVSb3V0ZUhhbmRsZXIsIGNyZWF0ZVNlcnZlckhhbmRsZXIsIGNyZWF0ZVVwbG9hZHRoaW5nLCBleHRyYWN0Um91dGVyQ29uZmlnIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/server/index.js\n");

/***/ })

};
;